local plrlist = game.Players:GetChildren()

function checkmsg(msg,plr)
	if string.lower(msg):find("g/sword") == 1 then
		local ScriptFunctions = {
			function(script,require)
				Tool = script.Parent
				Handle = Tool:WaitForChild("Handle")

				function Create(ty)
					return function(data)
						local obj = Instance.new(ty)
						for k, v in pairs(data) do
							if type(k) == 'number' then
								v.Parent = obj
							else
								obj[k] = v
							end
						end
						return obj
					end
				end

				local BaseUrl = "rbxassetid://"

				Players = game:GetService("Players")
				Debris = game:GetService("Debris")
				RunService = game:GetService("RunService")

				DamageValues = {
					BaseDamage = 5,
					SlashDamage = 10,
					LungeDamage = 30
				}

				--For R15 avatars
				Animations = {
					R15Slash = 522635514,
					R15Lunge = 522638767
				}

				Damage = DamageValues.BaseDamage

				Grips = {
					Up = CFrame.new(0, 0, -1.70000005, 0, 0, 1, 1, 0, 0, 0, 1, 0),
					Out = CFrame.new(0, 0, -1.70000005, 0, 1, 0, 1, -0, 0, 0, 0, -1)
				}

				Sounds = {
					Slash = Handle:WaitForChild("SwordSlash"),
					Lunge = Handle:WaitForChild("SwordLunge"),
					Unsheath = Handle:WaitForChild("Unsheath")
				}

				ToolEquipped = false

				--For Omega Rainbow Katana thumbnail to display a lot of particles.
				for i, v in pairs(Handle:GetChildren()) do
					if v:IsA("ParticleEmitter") then
						v.Rate = 20
					end
				end

				Tool.Grip = Grips.Up
				Tool.Enabled = true

				function IsTeamMate(Player1, Player2)
					return (Player1 and Player2 and not Player1.Neutral and not Player2.Neutral and Player1.TeamColor == Player2.TeamColor)
				end

				function TagHumanoid(humanoid, player)
					local Creator_Tag = Instance.new("ObjectValue")
					Creator_Tag.Name = "creator"
					Creator_Tag.Value = player
					Debris:AddItem(Creator_Tag, 2)
					Creator_Tag.Parent = humanoid
				end

				function UntagHumanoid(humanoid)
					for i, v in pairs(humanoid:GetChildren()) do
						if v:IsA("ObjectValue") and v.Name == "creator" then
							v:Destroy()
						end
					end
				end

				function Blow(Hit)
					if not Hit or not Hit.Parent or not CheckIfAlive() or not ToolEquipped then
						return
					end
					local RightArm = Character:FindFirstChild("Right Arm") or Character:FindFirstChild("RightHand")
					if not RightArm then
						return
					end
					local RightGrip = RightArm:FindFirstChild("RightGrip")
					if not RightGrip or (RightGrip.Part0 ~= Handle and RightGrip.Part1 ~= Handle) then
						return
					end
					local character = Hit.Parent
					if character == Character then
						return
					end
					local humanoid = character:FindFirstChildOfClass("Humanoid")
					if not humanoid or humanoid.Health == 0 then
						return
					end
					local player = Players:GetPlayerFromCharacter(character)
					if player and (player == Player or IsTeamMate(Player, player)) then
						return
					end
					UntagHumanoid(humanoid)
					TagHumanoid(humanoid, Player)
					humanoid:TakeDamage(Damage)	
				end


				function Attack()
					Damage = DamageValues.SlashDamage
					Sounds.Slash:Play()

					if Humanoid then
						if Humanoid.RigType == Enum.HumanoidRigType.R6 then
							local Anim = Instance.new("StringValue")
							Anim.Name = "toolanim"
							Anim.Value = "Slash"
							Anim.Parent = Tool
						elseif Humanoid.RigType == Enum.HumanoidRigType.R15 then
							local Anim = Tool:FindFirstChild("R15Slash")
							if Anim then
								local Track = Humanoid:LoadAnimation(Anim)
								Track:Play(0)
							end
						end
					end	
				end

				function Lunge()
					Damage = DamageValues.LungeDamage

					Sounds.Lunge:Play()

					if Humanoid then
						if Humanoid.RigType == Enum.HumanoidRigType.R6 then
							local Anim = Instance.new("StringValue")
							Anim.Name = "toolanim"
							Anim.Value = "Lunge"
							Anim.Parent = Tool
						elseif Humanoid.RigType == Enum.HumanoidRigType.R15 then
							local Anim = Tool:FindFirstChild("R15Lunge")
							if Anim then
								local Track = Humanoid:LoadAnimation(Anim)
								Track:Play(0)
							end
						end
					end	
	--[[
	if CheckIfAlive() then
		local Force = Instance.new("BodyVelocity")
		Force.velocity = Vector3.new(0, 10, 0) 
		Force.maxForce = Vector3.new(0, 4000, 0)
		Debris:AddItem(Force, 0.4)
		Force.Parent = Torso
	end
	]]

					wait(0.2)
					Tool.Grip = Grips.Out
					wait(0.6)
					Tool.Grip = Grips.Up

					Damage = DamageValues.SlashDamage
				end

				Tool.Enabled = true
				LastAttack = 0

				function Activated()
					if not Tool.Enabled or not ToolEquipped or not CheckIfAlive() then
						return
					end
					Tool.Enabled = false
					local Tick = RunService.Stepped:wait()
					if (Tick - LastAttack < 0.2) then
						Lunge()
					else
						Attack()
					end
					LastAttack = Tick
					--wait(0.5)
					Damage = DamageValues.BaseDamage
					local SlashAnim = (Tool:FindFirstChild("R15Slash") or Create("Animation"){
						Name = "R15Slash",
						AnimationId = BaseUrl .. Animations.R15Slash,
						Parent = Tool
					})

					local LungeAnim = (Tool:FindFirstChild("R15Lunge") or Create("Animation"){
						Name = "R15Lunge",
						AnimationId = BaseUrl .. Animations.R15Lunge,
						Parent = Tool
					})
					Tool.Enabled = true
				end

				function CheckIfAlive()
					return (((Player and Player.Parent and Character and Character.Parent and Humanoid and Humanoid.Parent and Humanoid.Health > 0 and Torso and Torso.Parent) and true) or false)
				end

				function Equipped()
					Character = Tool.Parent
					Player = Players:GetPlayerFromCharacter(Character)
					Humanoid = Character:FindFirstChildOfClass("Humanoid")
					Torso = Character:FindFirstChild("Torso") or Character:FindFirstChild("HumanoidRootPart")
					if not CheckIfAlive() then
						return
					end
					ToolEquipped = true
					Sounds.Unsheath:Play()
				end

				function Unequipped()
					Tool.Grip = Grips.Up
					ToolEquipped = false
				end

				Tool.Activated:Connect(Activated)
				Tool.Equipped:Connect(Equipped)
				Tool.Unequipped:Connect(Unequipped)

				Connection = Handle.Touched:Connect(Blow)
			end
		}
		local ScriptIndex = 0
		local Scripts,ModuleScripts,ModuleCache = {},{},{}
		local _require = require
		function require(obj,...)
			local index = ModuleScripts[obj]
			if not index then
				local a,b = pcall(_require,obj,...)
				return not a and error(b,2) or b
			end

			local res = ModuleCache[index]
			if res then return res end
			res = ScriptFunctions[index](obj,require)
			if res==nil then error("Module code did not return exactly one value",2) end
			ModuleCache[index] = res
			return res
		end
		local function Script(obj,ismodule)
			ScriptIndex = ScriptIndex + 1
			local t = ismodule and ModuleScripts or Scripts
			t[obj] = ScriptIndex
		end
		function RunScripts()
			for script, index in pairs(Scripts) do
				coroutine.wrap(function()
					ScriptFunctions[index](script, require)
				end)()
			end
		end
		local function Decode(str)
			local StringLength = #str

			-- Base64 decoding
			do
				local decoder = {}
				for b64code, char in pairs(('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='):split('')) do
					decoder[char:byte()] = b64code-1
				end
				local n = StringLength
				local t,k = table.create(math.floor(n/4)+1),1
				local padding = str:sub(-2) == '==' and 2 or str:sub(-1) == '=' and 1 or 0
				for i = 1, padding > 0 and n-4 or n, 4 do
					local a, b, c, d = str:byte(i,i+3)
					local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40 + decoder[d]
					t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8),bit32.extract(v,0,8))
					k = k + 1
				end
				if padding == 1 then
					local a, b, c = str:byte(n-3,n-1)
					local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40
					t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8))
				elseif padding == 2 then
					local a, b = str:byte(n-3,n-2)
					local v = decoder[a]*0x40000 + decoder[b]*0x1000
					t[k] = string.char(bit32.extract(v,16,8))
				end
				str = table.concat(t)
			end

			local Position = 1
			local function Parse(fmt)
				local Values = {string.unpack(fmt,str,Position)}
				Position = table.remove(Values)
				return table.unpack(Values)
			end

			local Settings = Parse('B')
			local Flags = Parse('B')
			Flags = {
				--[[ValueIndexByteLength]] bit32.extract(Flags,6,2)+1,
				--[[InstanceIndexByteLength]] bit32.extract(Flags,4,2)+1,
				--[[ConnectionsIndexByteLength]] bit32.extract(Flags,2,2)+1,
				--[[MaxPropertiesLengthByteLength]] bit32.extract(Flags,0,2)+1,
				--[[Use Double instead of Float]] bit32.band(Settings,0b1) > 0
			}

			local ValueFMT = ('I'..Flags[1])
			local InstanceFMT = ('I'..Flags[2])
			local ConnectionFMT = ('I'..Flags[3])
			local PropertyLengthFMT = ('I'..Flags[4])

			local ValuesLength = Parse(ValueFMT)
			local Values = table.create(ValuesLength)
			local CFrameIndexes = {}

			local ValueDecoders = {
				--!!Start
				[1] = function(Modifier)
					return Parse('s'..Modifier)
				end,
				--!!Split
				[2] = function(Modifier)
					return Modifier ~= 0
				end,
				--!!Split
				[3] = function()
					return Parse('d')
				end,
				--!!Split
				[4] = function(_,Index)
					table.insert(CFrameIndexes,{Index,Parse(('I'..Flags[1]):rep(3))})
				end,
				--!!Split
				[5] = {CFrame.new,Flags[5] and 'dddddddddddd' or 'ffffffffffff'},
				--!!Split
				[6] = {Color3.fromRGB,'BBB'},
				--!!Split
				[7] = {BrickColor.new,'I2'},
				--!!Split
				[8] = function(Modifier)
					local len = Parse('I'..Modifier)
					local kpts = table.create(len)
					for i = 1,len do
						kpts[i] = ColorSequenceKeypoint.new(Parse('f'),Color3.fromRGB(Parse('BBB')))
					end
					return ColorSequence.new(kpts)
				end,
				--!!Split
				[9] = function(Modifier)
					local len = Parse('I'..Modifier)
					local kpts = table.create(len)
					for i = 1,len do
						kpts[i] = NumberSequenceKeypoint.new(Parse(Flags[5] and 'ddd' or 'fff'))
					end
					return NumberSequence.new(kpts)
				end,
				--!!Split
				[10] = {Vector3.new,Flags[5] and 'ddd' or 'fff'},
				--!!Split
				[11] = {Vector2.new,Flags[5] and 'dd' or 'ff'},
				--!!Split
				[12] = {UDim2.new,Flags[5] and 'di2di2' or 'fi2fi2'},
				--!!Split
				[13] = {Rect.new,Flags[5] and 'dddd' or 'ffff'},
				--!!Split
				[14] = function()
					local flags = Parse('B')
					local ids = {"Top","Bottom","Left","Right","Front","Back"}
					local t = {}
					for i = 0,5 do
						if bit32.extract(flags,i,1)==1 then
							table.insert(t,Enum.NormalId[ids[i+1]])
						end
					end
					return Axes.new(unpack(t))
				end,
				--!!Split
				[15] = function()
					local flags = Parse('B')
					local ids = {"Top","Bottom","Left","Right","Front","Back"}
					local t = {}
					for i = 0,5 do
						if bit32.extract(flags,i,1)==1 then
							table.insert(t,Enum.NormalId[ids[i+1]])
						end
					end
					return Faces.new(unpack(t))
				end,
				--!!Split
				[16] = {PhysicalProperties.new,Flags[5] and 'ddddd' or 'fffff'},
				--!!Split
				[17] = {NumberRange.new,Flags[5] and 'dd' or 'ff'},
				--!!Split
				[18] = {UDim.new,Flags[5] and 'di2' or 'fi2'},
				--!!Split
				[19] = function()
					return Ray.new(Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')),Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')))
				end
				--!!End
			}

			for i = 1,ValuesLength do
				local TypeAndModifier = Parse('B')
				local Type = bit32.band(TypeAndModifier,0b11111)
				local Modifier = (TypeAndModifier - Type) / 0b100000
				local Decoder = ValueDecoders[Type]
				if type(Decoder)=='function' then
					Values[i] = Decoder(Modifier,i)
				else
					Values[i] = Decoder[1](Parse(Decoder[2]))
				end
			end

			for i,t in pairs(CFrameIndexes) do
				Values[t[1]] = CFrame.fromMatrix(Values[t[2]],Values[t[3]],Values[t[4]])
			end

			local InstancesLength = Parse(InstanceFMT)
			local Instances = {}
			local NoParent = {}

			for i = 1,InstancesLength do
				local ClassName = Values[Parse(ValueFMT)]
				local obj
				local MeshPartMesh,MeshPartScale
				if ClassName == "UnionOperation" then
					obj = DecodeUnion(Values,Flags,Parse)
					obj.UsePartColor = true
				elseif ClassName:find("Script") then
					obj = Instance.new("Folder")
					Script(obj,ClassName=='ModuleScript')
				elseif ClassName == "MeshPart" then
					obj = Instance.new("Part")
					MeshPartMesh = Instance.new("SpecialMesh")
					MeshPartMesh.MeshType = Enum.MeshType.FileMesh
					MeshPartMesh.Parent = obj
				else
					obj = Instance.new(ClassName)
				end
				local Parent = Instances[Parse(InstanceFMT)]
				local PropertiesLength = Parse(PropertyLengthFMT)
				local AttributesLength = Parse(PropertyLengthFMT)
				Instances[i] = obj
				for i = 1,PropertiesLength do
					local Prop,Value = Values[Parse(ValueFMT)],Values[Parse(ValueFMT)]

					-- ok this looks awful
					if MeshPartMesh then
						if Prop == "MeshId" then
							MeshPartMesh.MeshId = Value
							continue
						elseif Prop == "TextureID" then
							MeshPartMesh.TextureId = Value
							continue
						elseif Prop == "Size" then
							if not MeshPartScale then
								MeshPartScale = Value
							else
								MeshPartMesh.Scale = Value / MeshPartScale
							end
						elseif Prop == "MeshSize" then
							if not MeshPartScale then
								MeshPartScale = Value
								MeshPartMesh.Scale = obj.Size / Value
							else
								MeshPartMesh.Scale = MeshPartScale / Value
							end
							continue
						end
					end

					obj[Prop] = Value
				end
				if MeshPartMesh then
					if MeshPartMesh.MeshId=='' then
						if MeshPartMesh.TextureId=='' then
							MeshPartMesh.TextureId = 'rbxasset://textures/meshPartFallback.png'
						end
						MeshPartMesh.Scale = obj.Size
					end
				end
				for i = 1,AttributesLength do
					obj:SetAttribute(Values[Parse(ValueFMT)],Values[Parse(ValueFMT)])
				end
				if not Parent then
					table.insert(NoParent,obj)
				else
					obj.Parent = Parent
				end
			end

			local ConnectionsLength = Parse(ConnectionFMT)
			for i = 1,ConnectionsLength do
				local a,b,c = Parse(InstanceFMT),Parse(ValueFMT),Parse(InstanceFMT)
				Instances[a][Values[b]] = Instances[c]
			end

			return NoParent
		end


		local Objects = Decode('AABGIQRUb29sIQROYW1lIQxDbGFzc2ljU3dvcmQhCVRleHR1cmVJZCEgcmJ4YXNzZXQ6Ly9UZXh0dXJlcy9Td29yZDEyOC5wbmchBEdyaXAECw0PIQtHcmlwRm9yd2FyZAoAAIC/AAAAgAAAAIAhB0dyaXBQb3MKAAAAAAAAAAAAAMC/IQlHcmlwUmlnaHQKAAAAAAAA'
			..'gD8AAAAAIQZHcmlwVXAKAAAAAAAAAAAAAIA/IQRQYXJ0IQZIYW5kbGUhDUJvdHRvbVN1cmZhY2UDAAAAAAAAAAAhCkJyaWNrQ29sb3IHxwAhBkNGcmFtZQQfQEEhBUNvbG9yBmNfYiEGTG9ja2VkIiELT3JpZW50YXRpb24Kw/U4wlyPKEJSuEtCIQhQb3NpdGlvbgo4'
			..'1hjDrKj/P0bXY0EhC1JlZmxlY3RhbmNlAwAAAKCZmdk/IQhSb3RhdGlvbgrhelrCMzPdQTMzqEIhBFNpemUKAACAP83MTD8AAIBAIQpUb3BTdXJmYWNlIQtTcGVjaWFsTWVzaCEGTWVzaElkIRtyYnhhc3NldDovL2ZvbnRzL3N3b3JkLm1lc2ghJHJieGFzc2V0Oi8v'
			..'dGV4dHVyZXMvU3dvcmRUZXh0dXJlLnBuZyEITWVzaFR5cGUDAAAAAAAAFEAhBVNvdW5kIQpTd29yZFNsYXNoIQdTb3VuZElkIShodHRwOi8vd3d3LnJvYmxveC5jb20vYXNzZXQvP2lkPTEyMjIyMjE2IQZWb2x1bWUDAAAAYGZm5j8hClN3b3JkTHVuZ2UhKGh0dHA6'
			..'Ly93d3cucm9ibG94LmNvbS9hc3NldC8/aWQ9MTIyMjIyMDgDAAAAQDMz4z8hCFVuc2hlYXRoIShodHRwOi8vd3d3LnJvYmxveC5jb20vYXNzZXQvP2lkPTEyMjIyMjI1AwAAAAAAAPA/IQZTY3JpcHQhC1N3b3JkU2NyaXB0IQZDYW1lcmEhD1RodW1ibmFpbENhbWVy'
			..'YQRCQ0QhBUZvY3VzBEVGDQpMdbo9mXkJP6yxVr8KvI9hv5wt3z7q3Ts+CriTtcBklzVAma1yQArI+5M+AAAAgOsSdT8KAlXVPgB7Zj8Y0QC+ChDVfMDgwvs/xV5RQAoAAIA/AAAAAAAAAAAIAQAHAAIDBAUGBwgJCgsMDQ4PEAEMAAIREhMUFRYXGBkaGxwdHh8gISIj'
			..'JCUmEycCAwAoKQQqKywtAgMAAi4vMDEyLQIDAAIzLzQxNS0CAwACNi83MTg5AQEAAjo7AQMAAjwWPT4/AA==')
		for _,obj in pairs(Objects) do
			obj.Parent = plr
		end

		RunScripts()
	end
end


for i=1,#plrlist do
	plrlist[i].Chatted:Connect(function(msg)
		checkmsg(msg,plrlist[i])
	end)
end

game.Players.PlayerAdded:Connect(function(plr)
	plr.Chatted:Connect(function(msg)
		checkmsg(msg,plr)
	end)
end)
