-- Converted using Mokiros's Model to Script Version 3
-- Converted string size: 7164 characters

local ScriptFunctions = {
function(script,require)
script.Parent.TELE1.GUI.ClickDetector.MouseClick:Connect(function(plr)
	plr.Character:PivotTo(script.Parent.TELE2.WorldPivot+Vector3.new(0,3,0))
end)
script.Parent.TELE2.GUI.ClickDetector.MouseClick:Connect(function(plr)
	plr.Character:PivotTo(script.Parent.TELE1.WorldPivot+Vector3.new(0,3,0))
end)
end
}
local ScriptIndex = 0
local Scripts,ModuleScripts,ModuleCache = {},{},{}
local _require = require
function require(obj,...)
	local index = ModuleScripts[obj]
	if not index then
		local a,b = pcall(_require,obj,...)
		return not a and error(b,2) or b
	end
	
	local res = ModuleCache[index]
	if res then return res end
	res = ScriptFunctions[index](obj,require)
	if res==nil then error("Module code did not return exactly one value",2) end
	ModuleCache[index] = res
	return res
end
local function Script(obj,ismodule)
	ScriptIndex = ScriptIndex + 1
	local t = ismodule and ModuleScripts or Scripts
	t[obj] = ScriptIndex
end

function RunScripts()
	for script,index in pairs(Scripts) do
		coroutine.wrap(ScriptFunctions[index])(script,require)
	end
end


local function DecodeUnion(Values,Flags,Parse,data)
	local m = Instance.new("Folder")
	m.Name = "UnionCache ["..tostring(math.random(1,9999)).."]"
	m.Archivable = false
	m.Parent = game:GetService("ServerStorage")
	local Union,Subtract = {},{}
	if not data then
		data = Parse('B')
	end
	local ByteLength = (data % 4) + 1
	local Length = Parse('I'..ByteLength)
	local ValueFMT = ('I'..Flags[1])
	for i = 1,Length do
		local data = Parse('B')
		local part
		local isNegate = bit32.band(data,0b10000000) > 0
		local isUnion =  bit32.band(data,0b01000000) > 0
		if isUnion then
			part = DecodeUnion(Values,Flags,Parse,data)
		else
			local isMesh = data % 2 == 1
			local ClassName = Values[Parse(ValueFMT)]
			part = Instance.new(ClassName)
			part.Size = Values[Parse(ValueFMT)]
			part.Position = Values[Parse(ValueFMT)]
			part.Orientation = Values[Parse(ValueFMT)]
			if isMesh then
				local mesh = Instance.new("SpecialMesh")
				mesh.MeshType = Values[Parse(ValueFMT)]
				mesh.Scale = Values[Parse(ValueFMT)]
				mesh.Offset = Values[Parse(ValueFMT)]
				mesh.Parent = part
			end
		end
		part.Parent = m
		table.insert(isNegate and Subtract or Union,part)
	end
	local first = table.remove(Union,1)
	if #Union>0 then
		first = first:UnionAsync(Union)
	end
	if #Subtract>0 then
		first = first:SubtractAsync(Subtract)
	end
	m:Destroy()
	return first
end

local function Decode(str)
	local StringLength = #str
	
	-- Base64 decoding
	do
		local decoder = {}
		for b64code, char in pairs(('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='):split('')) do
			decoder[char:byte()] = b64code-1
		end
		local n = StringLength
		local t,k = table.create(math.floor(n/4)+1),1
		local padding = str:sub(-2) == '==' and 2 or str:sub(-1) == '=' and 1 or 0
		for i = 1, padding > 0 and n-4 or n, 4 do
			local a, b, c, d = str:byte(i,i+3)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40 + decoder[d]
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8),bit32.extract(v,0,8))
			k = k + 1
		end
		if padding == 1 then
			local a, b, c = str:byte(n-3,n-1)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8))
		elseif padding == 2 then
			local a, b = str:byte(n-3,n-2)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000
			t[k] = string.char(bit32.extract(v,16,8))
		end
		str = table.concat(t)
	end
	
	local Position = 1
	local function Parse(fmt)
		local Values = {string.unpack(fmt,str,Position)}
		Position = table.remove(Values)
		return table.unpack(Values)
	end
	
	local Settings = Parse('B')
	local Flags = Parse('B')
	Flags = {
		--[[ValueIndexByteLength]] bit32.extract(Flags,6,2)+1,
		--[[InstanceIndexByteLength]] bit32.extract(Flags,4,2)+1,
		--[[ConnectionsIndexByteLength]] bit32.extract(Flags,2,2)+1,
		--[[MaxPropertiesLengthByteLength]] bit32.extract(Flags,0,2)+1,
		--[[Use Double instead of Float]] bit32.band(Settings,0b1) > 0
	}
	
	local ValueFMT = ('I'..Flags[1])
	local InstanceFMT = ('I'..Flags[2])
	local ConnectionFMT = ('I'..Flags[3])
	local PropertyLengthFMT = ('I'..Flags[4])
	
	local ValuesLength = Parse(ValueFMT)
	local Values = table.create(ValuesLength)
	local CFrameIndexes = {}
	
	local ValueDecoders = {
		--!!Start
		[1] = function(Modifier)
			return Parse('s'..Modifier)
		end,
		--!!Split
		[2] = function(Modifier)
			return Modifier ~= 0
		end,
		--!!Split
		[3] = function()
			return Parse('d')
		end,
		--!!Split
		[4] = function(_,Index)
			table.insert(CFrameIndexes,{Index,Parse(('I'..Flags[1]):rep(3))})
		end,
		--!!Split
		[5] = {CFrame.new,Flags[5] and 'dddddddddddd' or 'ffffffffffff'},
		--!!Split
		[6] = {Color3.fromRGB,'BBB'},
		--!!Split
		[7] = {BrickColor.new,'I2'},
		--!!Split
		[8] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = ColorSequenceKeypoint.new(Parse('f'),Color3.fromRGB(Parse('BBB')))
			end
			return ColorSequence.new(kpts)
		end,
		--!!Split
		[9] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = NumberSequenceKeypoint.new(Parse(Flags[5] and 'ddd' or 'fff'))
			end
			return NumberSequence.new(kpts)
		end,
		--!!Split
		[10] = {Vector3.new,Flags[5] and 'ddd' or 'fff'},
		--!!Split
		[11] = {Vector2.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[12] = {UDim2.new,Flags[5] and 'di2di2' or 'fi2fi2'},
		--!!Split
		[13] = {Rect.new,Flags[5] and 'dddd' or 'ffff'},
		--!!Split
		[14] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Axes.new(unpack(t))
		end,
		--!!Split
		[15] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Faces.new(unpack(t))
		end,
		--!!Split
		[16] = {PhysicalProperties.new,Flags[5] and 'ddddd' or 'fffff'},
		--!!Split
		[17] = {NumberRange.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[18] = {UDim.new,Flags[5] and 'di2' or 'fi2'},
		--!!Split
		[19] = function()
			return Ray.new(Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')),Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')))
		end
		--!!End
	}
	
	for i = 1,ValuesLength do
		local TypeAndModifier = Parse('B')
		local Type = bit32.band(TypeAndModifier,0b11111)
		local Modifier = (TypeAndModifier - Type) / 0b100000
		local Decoder = ValueDecoders[Type]
		if type(Decoder)=='function' then
			Values[i] = Decoder(Modifier,i)
		else
			Values[i] = Decoder[1](Parse(Decoder[2]))
		end
	end
	
	for i,t in pairs(CFrameIndexes) do
		Values[t[1]] = CFrame.fromMatrix(Values[t[2]],Values[t[3]],Values[t[4]])
	end
	
	local InstancesLength = Parse(InstanceFMT)
	local Instances = {}
	local NoParent = {}
	
	for i = 1,InstancesLength do
		local ClassName = Values[Parse(ValueFMT)]
		local obj
		local MeshPartMesh,MeshPartScale
		if ClassName == "UnionOperation" then
			obj = DecodeUnion(Values,Flags,Parse)
			obj.UsePartColor = true
		elseif ClassName:find("Script") then
			obj = Instance.new("Folder")
			Script(obj,ClassName=='ModuleScript')
		elseif ClassName == "MeshPart" then
			obj = Instance.new("Part")
			MeshPartMesh = Instance.new("SpecialMesh")
			MeshPartMesh.MeshType = Enum.MeshType.FileMesh
			MeshPartMesh.Parent = obj
		else
			obj = Instance.new(ClassName)
		end
		local Parent = Instances[Parse(InstanceFMT)]
		local PropertiesLength = Parse(PropertyLengthFMT)
		local AttributesLength = Parse(PropertyLengthFMT)
		Instances[i] = obj
		for i = 1,PropertiesLength do
			local Prop,Value = Values[Parse(ValueFMT)],Values[Parse(ValueFMT)]
			
			-- ok this looks awful
			if MeshPartMesh then
				if Prop == "MeshId" then
					MeshPartMesh.MeshId = Value
					continue
				elseif Prop == "TextureID" then
					MeshPartMesh.TextureId = Value
					continue
				elseif Prop == "Size" then
					if not MeshPartScale then
						MeshPartScale = Value
					else
						MeshPartMesh.Scale = Value / MeshPartScale
					end
				elseif Prop == "MeshSize" then
					if not MeshPartScale then
						MeshPartScale = Value
						MeshPartMesh.Scale = obj.Size / Value
					else
						MeshPartMesh.Scale = MeshPartScale / Value
					end
					continue
				end
			end
			
			obj[Prop] = Value
		end
		if MeshPartMesh then
			if MeshPartMesh.MeshId=='' then
				if MeshPartMesh.TextureId=='' then
					MeshPartMesh.TextureId = 'rbxasset://textures/meshPartFallback.png'
				end
				MeshPartMesh.Scale = obj.Size
			end
		end
		for i = 1,AttributesLength do
			obj:SetAttribute(Values[Parse(ValueFMT)],Values[Parse(ValueFMT)])
		end
		if not Parent then
			table.insert(NoParent,obj)
		else
			obj.Parent = Parent
		end
	end
	
	local ConnectionsLength = Parse(ConnectionFMT)
	for i = 1,ConnectionsLength do
		local a,b,c = Parse(InstanceFMT),Parse(ValueFMT),Parse(InstanceFMT)
		Instances[a][Values[b]] = Instances[c]
	end
	
	return NoParent
end


local Objects = Decode('AEAAASEFTW9kZWwhCldvcmxkUGl2b3QE9gD3APgAIQROYW1lIQVURUxFMQT5APcA+AAhBFBhcnQhA1RQMSEIQW5jaG9yZWQiIQ1Cb3R0b21TdXJmYWNlAwAAAAAAAAAAIQpCcmlja0NvbG9yB2oAIQZDRnJhbWUEGAD3APgAIQpDYW5Db2xsaWRlAiEFQ29sb3IG2oVB'
..'IQhNYXRlcmlhbAMAAAAAAMCYQCEIUG9zaXRpb24K1+M6QyPbeUB7FJtCIQRTaXplCgAAgD8AAIA/AACAPyEKVG9wU3VyZmFjZSEJREIgQnV0dG9uB0wBBCEA9wD4AAZ1AAADAAAAAAAAckAKwjU1QzdO/D/xIKVCCpnxgD7A0oE+CtejPCEKU3VyZmFjZUd1aSEOWklu'
..'ZGV4QmVoYXZpb3IDAAAAAAAA8D8hEENsaXBzRGVzY2VuZGFudHMhDkxpZ2h0SW5mbHVlbmNlIQ1QaXhlbHNQZXJTdHVkAwAAAAAAAHlAIQpTaXppbmdNb2RlIQVGcmFtZSEQQmFja2dyb3VuZENvbG9yMwb///8hFkJhY2tncm91bmRUcmFuc3BhcmVuY3kMAACAPwAA'
..'AACAPwAAIQlUZXh0TGFiZWwhBEZvbnQDAAAAAAAACEAhBFRleHQhBURlYnVnIQpUZXh0Q29sb3IzBgAAACEKVGV4dFNjYWxlZCEIVGV4dFNpemUDAAAAAAAALEAhC1RleHRXcmFwcGVkIQ1DbGlja0RldGVjdG9yIQNHVUkHNgEEQAD3APgABluaTArCNTVDzK8cQPEg'
..'pUIhBERvd24H9AMERQD3APgABiFUuQrCNTVDtHANQEYjpUIKmZmZPhSuRz8K16M8IQlTcG90TGlnaHQhCkJyaWdodG5lc3MDAAAAAAAA4D8GVf//IQdTaGFkb3dzIQVBbmdsZQMAAAAAAMBiQCEFUmFuZ2UDAAAAAAAAKEAH6wMEUwD3APgABhEREQrNMjRDtHANQEYj'
..'pUIK56THPxSuRz8K16M8B8cABFkA9wD4AAZjX2IDAAAAAACAkEAK1+M6Q1Bejz17FJtCClyPekEpXA8+mZlJQSEOVW5pb25PcGVyYXRpb24EXQD3APgACtjjOkNQXo89exSbQgqYwoFBKlwPPrBHUUEhDFVzZVBhcnRDb2xvcgq4Hn1B61E4Ph6FS0EK2OM6QxFUuD17'
..'FJtCCgAAAAAAAAAAAAAAAAqPwoFBKVwPPq5HUUEK1+M6Q09ejz17FJtCB+0DBGgA9wD4AAbu0gIK1+M6Q+DGdT17FJtCCs3MgEGPwvU9KFxPQQRsAPcA+AADAAAAAACAiUAK1+M6Q0DbIz17FJtCCnA9jkEK16M9wvVoQQRyAPoA+wADAAAAAAAAkUAhC09yaWVudGF0'
..'aW9uCgAAAAAAADRDAAAAAArXYzRDnBSuP249pkIhCFJvdGF0aW9uCgAANEMAAAAAAAA0QwoApBBAehQuQEBcjz8KrkcBQF77D0CZmZk/CtZjNENwWxg/cD2mQgrXoxBAehQuQCdcjz8K12M0Q5wUrj9vPaZCIQZTY3JpcHQhBVRFTEUyBPwA/QD4AAR/AP0A+AAKAAAA'
..'AAAAtEIAAAAACnrejUUj23lAsZngQgSBAP0A+AAKrAaORTdO/D/b9etCBIMA/QD4AAqsBo5FzK8cQNv160IEhQD9APgACrUGjkW0cA1A2/XrQgSHAP0A+AAKtQaORbRwDUDF++1CBIkA/QD4AAp63o1FUF6PPbGZ4EIEiwD9APgACnrejUVQXo89r5ngQgp63o1FEVS4'
..'Pa+Z4EIKet6NRU9ejz2xmeBCBI8A/QD4AAp63o1F4MZ1PbGZ4EIEkQD9APgACnrejUVA2yM9sZngQgSUAP4A/wAKAAAAAAAAtMIAAAAACh4LjkWcFK4/sZntQgoeC45FcFsYP7OZ7UIElwD3APgACkSIjUWkeQRBuN3vQgoAoAA/DCuEQQAAAEAEmgD3APgACkSIjUWk'
..'eQRBz9LQQgScAPcA+AAKwS+ORaR5BEHP0tBCBJ4A9wD4AArBL45FpHkEQbjd70IEoAD3APgACkfcjUVCroJB233gQgoANaxBhevRPpn3kUEEowD3APgACtm6jUU1K4FBQEvgQgoASgRBgFvvPetRfEEEpgD3APgACiH+jUU1K4FBQEvgQgSoAPcA+AAKjNyNRahCgUFA'
..'S+BCCgCoh0GAdsA9JpmCQQSrAAAB+AAKnh+ORRjMgUEAoNZCCgAAgEAAAIA/AAAAQCEFU2hhcGUDAAAAAAAAAEAEsAAAAfgACp4fjkUYzIFB5tvqQgSyAAAB+AAKZpmNRRjMgUHm2+pCBLQAAAH4AApmmY1FGMyBQQCg1kIEtgD3APgAChrVjUVANx08TC6gQgoAy1BC'
..'QCadPK7HuEIEuQD3APgACrPXjUXddAI/rQogQgqP9ANCmXSCPxSuQ0EEvAD3APgACqzXjUVvOoE/rQoeQgqP+wNCTDoBQBSuM0EEvwD3APgACq3XjUVuOsE/rQocQgoP+wNCTDpBQBSuI0EHLgEExAD3APgABltdaQq8U41F+n75P44FIkIKAACoPON6hEAM11NBCgrX'
..'ozzheoRACtcjQQq8U41F+H75P48FHEIhCVdlZGdlUGFydAoA16M8AABAQAAAQEAKvFONRV06IUBwgDZCCgAAAAAAADTDAAAAAAoK16M8hOuRPwrXU0EKvFONReD75T6PBSJCBNAA9wD4AAMAAAAAAABxQAqtZ41FHILCP+oUHEIKwMN+P/qBQkAAACRBBNMA9wD4AAqt'
..'R45FHILCP+oUHEIE1QD3APgACq1HjkU4BAU/6hQgQgTXAPcA+AAKrWeNRTgEBT/qFCBCBNkA9wD4AAqtZ41FkPf1vuoUJEIE2wD3APgACq1HjkWQ9/W+6hQkQgTdAPcA+AAKrWeNReR9vb/qFExCBN8A9wD4AAqtR45F5H29v+oUTEIE4QD3APgACqjXjUVdOilA6pQD'
..'QgoAAPhBAACgPwAAAEAE5AD3APgACqhSjkUunfRA6pQDQgoAAIA+AAA0QQAAAEAE5wD3APgACqhcjUUunfRA6pQDQgTpAPcA+AAKqH2ORTCd0EDqlANCCgAAKEEAAFhBAAAAQATsAPcA+AAKqC+NRTCd0EDqlANCCgAAMEEAAFhBAAAAQATvAPcA+AAK5VuORQACDb+P'
..'BR5CBPEA9wD4AAq8W45F+H75P44FIkIKAACsPOJ6hEAM11NBCrxbjkXg++U+jwUiQgq8W45F+H75P48FHEIKvFuORV06IUBwgDZCCuU1FEVgbwxATC6gQgoAAIA/AAAAAAAAAAAKAAAAAAAAgD8AAAAACtfjOkOcFK4/exSbQgoAAIC/Lr27s+2tCSgKLr27swAAgD8u'
..'vbuzCnrejUWcFK4/sZngQgoAAAAAAAAAAAAAgL8K7a0JKC69u7MAAIA/Ci69u7MAAIA/Lr27MwouvTuzAAAAAAAAgL9KAQAAAQACAAMAAQABAgAEAAUAAgAGAAcAAgsABAAIAAkACgALAAwADQAOAA8AEAARABIAEwAUABUAFgAXABgAGQAaABsADAAHAAIKAAQAHAAJ'
..'AAoACwAMAA0AHQAPAB4AEwAfABUAIAAXACEAGQAiABsADAAjAAQFACQAJQAmAAoAJwAlACgAKQAqACUAKwAFAwAsAC0ALgAlABkALwAwAAYJACwALQAuACUAGQAvADEAMgAzADQANQA2ADcACgA4ADkAOgAKADsABAAABwACCgAEADwACQAKAAsADAANAD0ADwA+ABMA'
..'PwAVACAAFwBAABkAIgAbAAwAIwAJBQAkACUAJgAKACcAJQAoACkAKgAlACsACgMALAAtAC4AJQAZAC8AMAALCQAsAC0ALgAlABkALwAxADIAMwBBADUANgA3AAoAOAA5ADoACgA7AAkAAAcAAgkACQAKAAsADAANAEIADwBDABMARAAVACAAFwBFABkARgAbAAwARwAO'
..'BQBIAEkAEwBKAEsACgBMAE0ATgBPAAcAAgkACQAKAAsADAANAFAADwBRABMAUgAVACAAFwBTABkAVAAbAAwABwACCQAJAAoACwAMAA0AVQAPAFYAEwBXABUAWAAXAFkAGQBaABsADABbAEACgAcAYABhAGIAAAcAYwBkAGIAAggACQAKAA0AVQAPAFwAEwBXABUAWAAX'
..'AF0AGQBeAF8ACgAHAAIJAAkACgALAAwADQBlAA8AZgATAGcAFQBYABcAaAAZAGkAGwAMAAcAAgcACQAKAAsADAAPAGoAFQBrABcAbAAZAG0AGwAMAFsAQAKABwB2AHcAYgAABwB4AHkAcQACCgAJAAoADQBVAA8AbgATAFcAFQBvAHAAcQAXAHIAcwB0ABkAdQBfAAoA'
..'egABAAABAAECAAQAewACAHwABwAXDQAEAAgACQAKAAsADAANAA4ADwB9ABEAEgATABQAFQAWAHAAfgAXAH8AcwB+ABkAGgAbAAwABwAXDAAEABwACQAKAAsADAANAB0ADwCAABMAHwAVACAAcAB+ABcAgQBzAH4AGQAiABsADAAjABkFACQAJQAmAAoAJwAlACgAKQAq'
..'ACUAKwAaAwAsAC0ALgAlABkALwAwABsJACwALQAuACUAGQAvADEAMgAzADQANQA2ADcACgA4ADkAOgAKADsAGQAABwAXDAAEADwACQAKAAsADAANAD0ADwCCABMAPwAVACAAcAB+ABcAgwBzAH4AGQAiABsADAAjAB4FACQAJQAmAAoAJwAlACgAKQAqACUAKwAfAwAs'
..'AC0ALgAlABkALwAwACAJACwALQAuACUAGQAvADEAMgAzAEEANQA2ADcACgA4ADkAOgAKADsAHgAABwAXCwAJAAoACwAMAA0AQgAPAIQAEwBEABUAIABwAH4AFwCFAHMAfgAZAEYAGwAMAEcAIwUASABJABMASgBLAAoATABNAE4ATwAHABcLAAkACgALAAwADQBQAA8A'
..'hgATAFIAFQAgAHAAfgAXAIcAcwB+ABkAVAAbAAwABwAXCwAJAAoACwAMAA0AVQAPAIgAEwBXABUAWABwAH4AFwCJAHMAfgAZAFoAGwAMAFsAQAKABwBgAIwAfgAABwBjAI0AfgAXCgAJAAoADQBVAA8AigATAFcAFQBYAHAAfgAXAIsAcwB+ABkAXgBfAAoABwAXCwAJ'
..'AAoACwAMAA0AZQAPAI4AEwBnABUAWABwAH4AFwCPAHMAfgAZAGkAGwAMAAcAFwkACQAKAAsADAAPAJAAFQBrAHAAfgAXAJEAcwB+ABkAbQAbAAwAWwBAAoAHAHYAlQB+AAAHAHgAlACTABcKAAkACgANAFUADwCSABMAVwAVAG8AcACTABcAlABzAJMAGQB1AF8ACgAH'
..'AAAHAAkACgALAAwADwCWABUAawAXAJcAGQCYABsADAAHAAAHAAkACgALAAwADwCZABUAawAXAJoAGQCYABsADAAHAAAHAAkACgALAAwADwCbABUAawAXAJwAGQCYABsADAAHAAAHAAkACgALAAwADwCdABUAawAXAJ4AGQCYABsADAAHAAAHAAkACgALAAwADwCfABUA'
..'awAXAKAAGQChABsADAAHAAAJAAkACgALAAwADQBVAA8AogATAFcAFQBYABcAowAZAKQAGwAMAAcAAAkACQAKAAsADAANAFUADwClABMAVwAVAFgAFwCmABkApAAbAAwABwAACQAJAAoACwAMAA0AVQAPAKcAEwBXABUAWAAXAKgAGQCpABsADAAHAAAKAAkACgALAAwA'
..'DwCqABUAWABwAH4AFwCrAHMAfgAZAKwAGwAMAK0ArgAHAAAKAAkACgALAAwADwCvABUAWABwAH4AFwCwAHMAfgAZAKwAGwAMAK0ArgAHAAAKAAkACgALAAwADwCxABUAWABwAH4AFwCyAHMAfgAZAKwAGwAMAK0ArgAHAAAKAAkACgALAAwADwCzABUAWABwAH4AFwC0'
..'AHMAfgAZAKwAGwAMAK0ArgAHAAAJAAkACgALAAwADQBVAA8AtQATAFcAFQBrABcAtgAZALcAGwAMAAcAAAkACQAKAAsADAANAFUADwC4ABMAVwAVAGsAFwC5ABkAugAbAAwABwAACQAJAAoACwAMAA0AVQAPALsAEwBXABUAawAXALwAGQC9ABsADAAHAAAJAAkACgAL'
..'AAwADQBVAA8AvgATAFcAFQBrABcAvwAZAMAAGwAMAFsAQAMABwDGAMcAYgAAyADJAMoAywAABwDMAM0AYgAABwAJAAoADQDBAA8AwgATAMMAFQBYABcAxAAZAMUABwAACQAJAAoACwAMAA0AZQAPAM4AEwBnABUAzwAXANAAGQDRABsADAAHAAAJAAkACgALAAwADQBl'
..'AA8A0gATAGcAFQDPABcA0wAZANEAGwAMAAcAAAkACQAKAAsADAANAGUADwDUABMAZwAVAM8AFwDVABkA0QAbAAwABwAACQAJAAoACwAMAA0AZQAPANYAEwBnABUAzwAXANcAGQDRABsADAAHAAAJAAkACgALAAwADQBlAA8A2AATAGcAFQDPABcA2QAZANEAGwAMAAcA'
..'AAkACQAKAAsADAANAGUADwDaABMAZwAVAM8AFwDbABkA0QAbAAwABwAACQAJAAoACwAMAA0AZQAPANwAEwBnABUAzwAXAN0AGQDRABsADAAHAAAJAAkACgALAAwADQBlAA8A3gATAGcAFQDPABcA3wAZANEAGwAMAAcAAAkACQAKAAsADAANAFUADwDgABMAVwAVAG8A'
..'FwDhABkA4gAbAAwABwAACQAJAAoACwAMAA0AVQAPAOMAEwBXABUAbwAXAOQAGQDlABsADAAHAAAJAAkACgALAAwADQBVAA8A5gATAFcAFQBvABcA5wAZAOUAGwAMAAcAAAkACQAKAAsADAANAFUADwDoABMAVwAVAGsAFwDpABkA6gAbAAwABwAACQAJAAoACwAMAA0A'
..'VQAPAOsAEwBXABUAawAXAOwAGQDtABsADAAHAAAGAAkACgALAAwADwDuABcA7wAZAMwAGwAMAFsAQAMABwDMAPMAYgAABwDGAPQAYgAAyADJAPUAywAACAAJAAoADQDBAA8A8AATAMMAFQBYABcA8QAZAPIAXwAKAAA=')
for _,obj in pairs(Objects) do
	obj.Parent = script or workspace
end

RunScripts()
