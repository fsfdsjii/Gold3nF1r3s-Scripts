-- Converted using Mokiros's Model to Script Version 3
-- Converted string size: 5300 characters

local ScriptFunctions = {
function(script,require)
script.Return.Event:Connect(function()
	for i=1,#brokenlist do
		local char = game.Players:GetPlayerByUserId(brokenlist[i]).Character
		if char:FindFirstChild("BrokenElevator-Up") then
			char:PivotTo(script.Parent.TELE1.WorldPivot+Vector3.new(0,3,0))
		elseif char:FindFirstChild("BrokenElevator-Down") then
			char:PivotTo(script.Parent.TELE2.WorldPivot+Vector3.new(0,3,0))
		else
			print("char has no file.")
		end
	end
	brokenlist = {}
end)
brokenlist = {}
cf = false

script.Parent.TELE1.GUI.ClickDetector.MouseClick:Connect(function(plr)
	local i = math.random(1,500)
	if i == 500 then
		plr.Character:PivotTo(script.Parent.TELEB.WorldPivot+Vector3.new(0,3,0))
		local f = Instance.new("Folder")
		f.Name="BrokenElevator-Down"
		f.Parent=plr.Character
		brokenlist[plr.UserId] = true
	else
		plr.Character:PivotTo(script.Parent.TELE2.WorldPivot+Vector3.new(0,3,0))
	end
end)
script.Parent.TELE2.GUI.ClickDetector.MouseClick:Connect(function(plr)
	local i = math.random(1,500)
	if i == 500 then
		plr.Character:PivotTo(script.Parent.TELEB.WorldPivot+Vector3.new(0,3,0))
		local f = Instance.new("Folder")
		f.Name="BrokenElevator-Up"
		f.Parent=plr.Character
		brokenlist[plr.UserId] = true
	else
		plr.Character:PivotTo(script.Parent.TELE1.WorldPivot+Vector3.new(0,3,0))
	end
end)
script.Parent.TELEB["DB Button"].ClickDetector.MouseClick:Connect(function(plr)
	if plr.Character:FindFirstChild("BrokenElevator-Up") ~= nil and cf ~= true then
		cf = true
		for i=1,30 do
			wait(1)
			script.Parent.TELEB.DebugGUI.SurfaceGui.Frame.Frame.Frame.Progress.Size=UDim2.new((30-i)/30,0,1,0)
		end
		script.Return:Fire()
		script.Parent.TELEB.DebugGUI.SurfaceGui.Frame.Frame.Frame.Progress.Size=UDim2.new(1,0,1,0)
	end
end)
end
}
local ScriptIndex = 0
local Scripts,ModuleScripts,ModuleCache = {},{},{}
local _require = require
function require(obj,...)
	local index = ModuleScripts[obj]
	if not index then
		local a,b = pcall(_require,obj,...)
		return not a and error(b,2) or b
	end
	
	local res = ModuleCache[index]
	if res then return res end
	res = ScriptFunctions[index](obj,require)
	if res==nil then error("Module code did not return exactly one value",2) end
	ModuleCache[index] = res
	return res
end
local function Script(obj,ismodule)
	ScriptIndex = ScriptIndex + 1
	local t = ismodule and ModuleScripts or Scripts
	t[obj] = ScriptIndex
end

function RunScripts()
	for script,index in pairs(Scripts) do
		coroutine.wrap(ScriptFunctions[index])(script,require)
	end
end


local function DecodeUnion(Values,Flags,Parse,data)
	local m = Instance.new("Folder")
	m.Name = "UnionCache ["..tostring(math.random(1,9999)).."]"
	m.Archivable = false
	m.Parent = game:GetService("ServerStorage")
	local Union,Subtract = {},{}
	if not data then
		data = Parse('B')
	end
	local ByteLength = (data % 4) + 1
	local Length = Parse('I'..ByteLength)
	local ValueFMT = ('I'..Flags[1])
	for i = 1,Length do
		local data = Parse('B')
		local part
		local isNegate = bit32.band(data,0b10000000) > 0
		local isUnion =  bit32.band(data,0b01000000) > 0
		if isUnion then
			part = DecodeUnion(Values,Flags,Parse,data)
		else
			local isMesh = data % 2 == 1
			local ClassName = Values[Parse(ValueFMT)]
			part = Instance.new(ClassName)
			part.Size = Values[Parse(ValueFMT)]
			part.Position = Values[Parse(ValueFMT)]
			part.Orientation = Values[Parse(ValueFMT)]
			if isMesh then
				local mesh = Instance.new("SpecialMesh")
				mesh.MeshType = Values[Parse(ValueFMT)]
				mesh.Scale = Values[Parse(ValueFMT)]
				mesh.Offset = Values[Parse(ValueFMT)]
				mesh.Parent = part
			end
		end
		part.Parent = m
		table.insert(isNegate and Subtract or Union,part)
	end
	local first = table.remove(Union,1)
	if #Union>0 then
		first = first:UnionAsync(Union)
	end
	if #Subtract>0 then
		first = first:SubtractAsync(Subtract)
	end
	m:Destroy()
	return first
end

local function Decode(str)
	local StringLength = #str
	
	-- Base64 decoding
	do
		local decoder = {}
		for b64code, char in pairs(('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='):split('')) do
			decoder[char:byte()] = b64code-1
		end
		local n = StringLength
		local t,k = table.create(math.floor(n/4)+1),1
		local padding = str:sub(-2) == '==' and 2 or str:sub(-1) == '=' and 1 or 0
		for i = 1, padding > 0 and n-4 or n, 4 do
			local a, b, c, d = str:byte(i,i+3)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40 + decoder[d]
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8),bit32.extract(v,0,8))
			k = k + 1
		end
		if padding == 1 then
			local a, b, c = str:byte(n-3,n-1)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8))
		elseif padding == 2 then
			local a, b = str:byte(n-3,n-2)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000
			t[k] = string.char(bit32.extract(v,16,8))
		end
		str = table.concat(t)
	end
	
	local Position = 1
	local function Parse(fmt)
		local Values = {string.unpack(fmt,str,Position)}
		Position = table.remove(Values)
		return table.unpack(Values)
	end
	
	local Settings = Parse('B')
	local Flags = Parse('B')
	Flags = {
		--[[ValueIndexByteLength]] bit32.extract(Flags,6,2)+1,
		--[[InstanceIndexByteLength]] bit32.extract(Flags,4,2)+1,
		--[[ConnectionsIndexByteLength]] bit32.extract(Flags,2,2)+1,
		--[[MaxPropertiesLengthByteLength]] bit32.extract(Flags,0,2)+1,
		--[[Use Double instead of Float]] bit32.band(Settings,0b1) > 0
	}
	
	local ValueFMT = ('I'..Flags[1])
	local InstanceFMT = ('I'..Flags[2])
	local ConnectionFMT = ('I'..Flags[3])
	local PropertyLengthFMT = ('I'..Flags[4])
	
	local ValuesLength = Parse(ValueFMT)
	local Values = table.create(ValuesLength)
	local CFrameIndexes = {}
	
	local ValueDecoders = {
		--!!Start
		[1] = function(Modifier)
			return Parse('s'..Modifier)
		end,
		--!!Split
		[2] = function(Modifier)
			return Modifier ~= 0
		end,
		--!!Split
		[3] = function()
			return Parse('d')
		end,
		--!!Split
		[4] = function(_,Index)
			table.insert(CFrameIndexes,{Index,Parse(('I'..Flags[1]):rep(3))})
		end,
		--!!Split
		[5] = {CFrame.new,Flags[5] and 'dddddddddddd' or 'ffffffffffff'},
		--!!Split
		[6] = {Color3.fromRGB,'BBB'},
		--!!Split
		[7] = {BrickColor.new,'I2'},
		--!!Split
		[8] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = ColorSequenceKeypoint.new(Parse('f'),Color3.fromRGB(Parse('BBB')))
			end
			return ColorSequence.new(kpts)
		end,
		--!!Split
		[9] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = NumberSequenceKeypoint.new(Parse(Flags[5] and 'ddd' or 'fff'))
			end
			return NumberSequence.new(kpts)
		end,
		--!!Split
		[10] = {Vector3.new,Flags[5] and 'ddd' or 'fff'},
		--!!Split
		[11] = {Vector2.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[12] = {UDim2.new,Flags[5] and 'di2di2' or 'fi2fi2'},
		--!!Split
		[13] = {Rect.new,Flags[5] and 'dddd' or 'ffff'},
		--!!Split
		[14] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Axes.new(unpack(t))
		end,
		--!!Split
		[15] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Faces.new(unpack(t))
		end,
		--!!Split
		[16] = {PhysicalProperties.new,Flags[5] and 'ddddd' or 'fffff'},
		--!!Split
		[17] = {NumberRange.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[18] = {UDim.new,Flags[5] and 'di2' or 'fi2'},
		--!!Split
		[19] = function()
			return Ray.new(Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')),Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')))
		end
		--!!End
	}
	
	for i = 1,ValuesLength do
		local TypeAndModifier = Parse('B')
		local Type = bit32.band(TypeAndModifier,0b11111)
		local Modifier = (TypeAndModifier - Type) / 0b100000
		local Decoder = ValueDecoders[Type]
		if type(Decoder)=='function' then
			Values[i] = Decoder(Modifier,i)
		else
			Values[i] = Decoder[1](Parse(Decoder[2]))
		end
	end
	
	for i,t in pairs(CFrameIndexes) do
		Values[t[1]] = CFrame.fromMatrix(Values[t[2]],Values[t[3]],Values[t[4]])
	end
	
	local InstancesLength = Parse(InstanceFMT)
	local Instances = {}
	local NoParent = {}
	
	for i = 1,InstancesLength do
		local ClassName = Values[Parse(ValueFMT)]
		local obj
		local MeshPartMesh,MeshPartScale
		if ClassName == "UnionOperation" then
			obj = DecodeUnion(Values,Flags,Parse)
			obj.UsePartColor = true
		elseif ClassName:find("Script") then
			obj = Instance.new("Folder")
			Script(obj,ClassName=='ModuleScript')
		elseif ClassName == "MeshPart" then
			obj = Instance.new("Part")
			MeshPartMesh = Instance.new("SpecialMesh")
			MeshPartMesh.MeshType = Enum.MeshType.FileMesh
			MeshPartMesh.Parent = obj
		else
			obj = Instance.new(ClassName)
		end
		local Parent = Instances[Parse(InstanceFMT)]
		local PropertiesLength = Parse(PropertyLengthFMT)
		local AttributesLength = Parse(PropertyLengthFMT)
		Instances[i] = obj
		for i = 1,PropertiesLength do
			local Prop,Value = Values[Parse(ValueFMT)],Values[Parse(ValueFMT)]
			
			-- ok this looks awful
			if MeshPartMesh then
				if Prop == "MeshId" then
					MeshPartMesh.MeshId = Value
					continue
				elseif Prop == "TextureID" then
					MeshPartMesh.TextureId = Value
					continue
				elseif Prop == "Size" then
					if not MeshPartScale then
						MeshPartScale = Value
					else
						MeshPartMesh.Scale = Value / MeshPartScale
					end
				elseif Prop == "MeshSize" then
					if not MeshPartScale then
						MeshPartScale = Value
						MeshPartMesh.Scale = obj.Size / Value
					else
						MeshPartMesh.Scale = MeshPartScale / Value
					end
					continue
				end
			end
			
			obj[Prop] = Value
		end
		if MeshPartMesh then
			if MeshPartMesh.MeshId=='' then
				if MeshPartMesh.TextureId=='' then
					MeshPartMesh.TextureId = 'rbxasset://textures/meshPartFallback.png'
				end
				MeshPartMesh.Scale = obj.Size
			end
		end
		for i = 1,AttributesLength do
			obj:SetAttribute(Values[Parse(ValueFMT)],Values[Parse(ValueFMT)])
		end
		if not Parent then
			table.insert(NoParent,obj)
		else
			obj.Parent = Parent
		end
	end
	
	local ConnectionsLength = Parse(ConnectionFMT)
	for i = 1,ConnectionsLength do
		local a,b,c = Parse(InstanceFMT),Parse(ValueFMT),Parse(InstanceFMT)
		Instances[a][Values[b]] = Instances[c]
	end
	
	return NoParent
end


local Objects = Decode('AAD7IQVNb2RlbCEETmFtZSEHQmF0Y2ggMSEKV29ybGRQaXZvdATx8vME9PLzIQVURUxFMgT19vMhBFBhcnQhA1RQMSEIQW5jaG9yZWQiIQ1Cb3R0b21TdXJmYWNlAwAAAAAAAAAAIQpCcmlja0NvbG9yB2oAIQZDRnJhbWUEGvLzIQpDYW5Db2xsaWRlAiEFQ29sb3IG'
..'2oVBIQhNYXRlcmlhbAMAAAAAAMCYQCEIUG9zaXRpb24KMd2NRSPbeUDTTeBCIQRTaXplCgAAgD8AAIA/AACAPyEKVG9wU3VyZmFjZQQi9vMDAAAAAACAiUAhC09yaWVudGF0aW9uCgAAAAAAALRCAAAAAAox3Y1FYG5yPcJN4EIhCFJvdGF0aW9uCnA9jkEK16M9wvVo'
..'QQftAwQp9vMG7tICAwAAAAAAgJBACjHdjUUALaI9wk3gQgrNzIBBj8L1PShcT0EhDlVuaW9uT3BlcmF0aW9uB8cABC/28wZjX2IKMd2NReCntj3ATeBCCpjCgUEqXA8+sEdRQQq4Hn1B61E4Ph6FS0EKMd2NRaKd3z3ATeBCCo/CgUEpXA8+rkdRQQox3Y1F4Ke2PcJN'
..'4EIENPbzClyPekEpXA8+mZlJQQfrAwQ79vMGERERAwAAAAAAAHJACmwFjkUAqw5A1q/tQgrnpMc/FK5HPwrXozwH9AMEQPbzBiFUuQpsBY5FAKsOQOyp60IKmZmZPhSuRz8K16M8IQlTcG90TGlnaHQhCkJyaWdodG5lc3MDAAAAAAAA4D8GVf//IQdTaGFkb3dzIQVB'
..'bmdsZQMAAAAAAMBiQCEFUmFuZ2UDAAAAAAAAKEAhA0dVSQc2AQRP9vMGW5pMCmMFjkUY6h1A7KnrQgqZ8YA+wNKBPgrXozwhDUNsaWNrRGV0ZWN0b3IhClN1cmZhY2VHdWkhDlpJbmRleEJlaGF2aW9yAwAAAAAAAPA/IRBDbGlwc0Rlc2NlbmRhbnRzIQ5MaWdodElu'
..'Zmx1ZW5jZSENUGl4ZWxzUGVyU3R1ZAMAAAAAAAB5QCEKU2l6aW5nTW9kZSEFRnJhbWUhEEJhY2tncm91bmRDb2xvcjMG////IRZCYWNrZ3JvdW5kVHJhbnNwYXJlbmN5DAAAgD8AAAAAgD8AACEJVGV4dExhYmVsIQRGb250AwAAAAAAAAhAIQRUZXh0IQJVcCEKVGV4'
..'dENvbG9yMwYAAAAhClRleHRTY2FsZWQhCFRleHRTaXplAwAAAAAAACxAIQtUZXh0V3JhcHBlZCEJREIgQnV0dG9uB0wBBG728wZ1AAAKYwWORdDC/j/sqetCIQVEZWJ1ZwRy9vMDAAAAAAAAkUAK1gmORTaJsD/CTe1CCuCjEEB6FC5AAHCPPwquRwFA8U7+PydcsD8K'
..'1QmORWzsPj/CTe1CCtejEEB6FC5AJ1yPPwrVCY5FNYmwP8JN7UIEefLzChrVjUVANx08TC6gQgoAy1BCQCadPK7HuEIhBlNjcmlwdCENQmluZGFibGVFdmVudCEGUmV0dXJuIQVURUxFMQT38vMEgfLzCtfjOkMj23lAexSbQgSD8vMKwjU1QzdO/D/xIKVCBIXy8wrC'
..'NTVDzK8cQPEgpUIhBERvd24EiPLzCsI1NUO0cA1ARiOlQgSK8vMKzTI0Q7RwDUBGI6VCBIzy8wrX4zpDUF6PPXsUm0IEjvLzCtjjOkNQXo89exSbQgrY4zpDElS4PXsUm0IKAAAAAAAAAAAAAAAABJLy8wrX4zpD4MZ1PXsUm0IElPLzCtfjOkNA2yM9exSbQgSX+PMK'
..'AAAAAAAANEMAAAAACtdjNEOcFK4/bj2mQgoAADTDAAAAAAAANMMKAKQQQHoULkBAXI8/Cq5HAUBe+w9AmZmZPwrWYzRDcFsYP3A9pkIK12M0Q5wUrj9vPaZCIQVURUxFQgT59vMEoPLzCjHdjUV/nwbB003gQgSi9vMKMd2NRe7RQ8HCTeBCBKT28wox3Y1F+KhDwcBN'
..'4EIKMd2NRQxXQ8HATeBCCjHdjUX4qEPBwk3gQgSm9vMhCERlYnVnR1VJBKr28wpsBY5FiGshwdav7UIDAAAAAAAAaUAGTExMDAAAAAAAAAAAQD8AAAwAAIA/AAAAAIA+AAAhCFVJQ29ybmVyBgCqAAzNzMw8AADNzEw9AAAMMzNzPwAAZmZmPwAAIQhQcm9ncmVzcwaq'
..'qgAEtvbzCmwFjkWIayHB7KnrQgdHAQS69vMGnAAACmMFjkXCmx3B7KnrQgf2AwS+9vMGpaUACmMFjkXuPSXB7KnrQgTA9vMK1gmORSEFL8HCTe1CCtUJjkWBJznBwk3tQgrVCY5FIQUvwcJN7UIE+vLzBMX78wqf641FNGftwMjJzkIKAMCLPsj6VEFUxoxBBMjy8wrK'
..'pI1FNGftwJhE4EIEyvLzCkYajkU0Z+3AmETgQgTM8vMKROCNRcA3FMCYROBCCgBmbEGAbV4/VMaMQQTP+/MKn+uNRTRn7cCOvfFCBNHy8wpE4I1Fkj1awZhE4EIE0/LzCkSIjUWkeQRBuN3vQgoAoAA/DCuEQQAAAEAE1vLzCkSIjUWkeQRBz9LQQgTY8vMKwS+ORaR5'
..'BEHP0tBCBNry8wrBL45FpHkEQbjd70IE3PLzCkfcjUVCroJB233gQgoANaxBhevRPpn3kUEE3/LzCtm6jUU1K4FBQEvgQgoASgRBgFvvPetRfEEE4vLzCiH+jUU1K4FBQEvgQgTk8vMKjNyNRahCgUFAS+BCCgCoh0GAdsA9JpmCQQTn+/MKnh+ORRjMgUEAoNZCCgAA'
..'gEAAAIA/AAAAQCEFU2hhcGUDAAAAAAAAAEAE7PvzCp4fjkUYzIFB5tvqQgTu+/MKZpmNRRjMgUHm2+pCBPD78wpmmY1FGMyBQQCg1kIK5TUURYysBUFMLqBCCgAAgD8AAAAAAAAAAAoAAAAAAACAPwAAAAAK5TUURWBvDEBMLqBCCjHdjUW0iA1Awk3gQgouvTuzAAAA'
..'AAAAgL8K1+M6Q5wUrj97FJtCCgAAgL8AAAAAAAAAAAox3Y1FG7QhwcJN4EIK2uqNRTRn7cCrQ+BCCgAAAAAAAAAAAACAv1sBAAIAAgMEBQEBAQAEBgECAgACBwQICQMLAAIKCwwNDg8QERITFBUWFxgZGhscHQ4JAwkACwwNDhEeFx8gIRkiIyEbJB0OCQMLAAsMDQ4P'
..'JREmFScXKCAhGSkjIRsqHQ4rQAKACTEyIQAJMzQhAwkACwwPLBEtFS4XKCAhGS8jIRswCQMLAAsMDQ4PLBE1FS4XKCAhGTQjIRs2HQ4JAwsACwwNDg83ETgVORc6ICEZOyMhGzwdDgkDCwALDA0ODz0RPhU/FzogIRlAIyEbQR0OQgoFAENEFUVGDEdISUoJAwwAAksL'
..'DA0OD0wRTRVOFzogIRlPIyEbUB0OUQwAAFIMBQBTVFUMVlRXWFlUWg4DAFtcXVQbXl8PCQBbXF1UG15gYWJjZGVmDGdoaQwJAwwAAmoLDA0OD2sRbBVtFzogIRluIyEbUB0OUREAAFIRBQBTVFUMVlRXWFlUWhMDAFtcXVQbXl8UCQBbXF1UG15gYWJvZGVmDGdoaQwr'
..'QAKACXR1IQAJdnchAwkACwwPLBFwFS4XcSAhGXIjIRtzCQIJAAsMDQ4PLBF4FS4XHxl5G3odDnsCAAB8GAEAAn0BAgIAAn4EfwkaCwACCgsMDQ4PEBGAExQVFhcYGYEbHB0OCRoKAAJqCwwNDg9rEYIVbRc6GYMbUB0OUhwFAFNUVQxWVFdYWVRaHQMAW1xdVBteXx4J'
..'AFtcXVQbXmBhYm9kZWYMZ2hpDFEcAAAJGgoAAksLDA0OD0wRhBVOFzoZhRtQHQ5SIQUAU1RVDFZUV1hZVFoiAwBbXF1UG15fIwkAW1xdVBteYGFihmRlZgxnaGkMUSEAAAkaCQALDA0ODz0RhxU/FzoZiBtBHQ5CJgUAQ0QVRUYMR0hJSgkaCQALDA0ODzcRiRU5FzoZ'
..'ihs8HQ4JGgkACwwNDg8sEYsVLhcoGYwbNh0OK0ACgAkxj5AACTOMkBoHAAsMDywRjRUuFygZjhswCRoJAAsMDQ4PJRGRFScXKBmSGyodDgkaBwALDA0OEZMXHxmUGyQdDitAAoAJmpuWAAl2nJYaCQALDA8sEZUVLhdxIJYZlyOYG5kBAgIAAp0EngkuCwACCgsMDQ4P'
..'EBGfExQVFhcYGaAbHB0OCS4LAAsMDQ4PJRGhFScXKCAhGaIjIRsqHQ4rQAKACTGlIQAJM6YhLgkACwwPLBGjFS4XKCAhGaQjIRswCS4LAAsMDQ4PLBGnFS4XKCAhGaYjIRs2HQ4JLgwAAqgLDA0ODzcRqRU5FzogIRmqIyEbPB0OUjMFAFNUVQxWVFerWVRaNAMAW1xd'
..'VBteWjUDAFusGa0brq82AABaNgMAW7AZsRuyrzgAAFo4AwACs1u0G16vOgAACS4LAAsMDQ4PPRG1FT8XOiAhGbYjIRtBHQ5CPAUAQ0QVRUYMR0hJSgkuDAACSwsMDQ4PtxG4FbkXOiAhGbojIRtQHQ5RPgAAUj4FAFNUVQxWVFdYWVRaQAMAW1xdVBteX0EJAFtcXVQb'
..'XmBhYmNkZWYMZ2hpDAkuDAACagsMDQ4PuxG8Fb0XOiAhGb4jIRtQHQ5RQwAAUkMFAFNUVQxWVFdYWVRaRQMAW1xdVBteX0YJAFtcXVQbXmBhYm9kZWYMZ2hpDCtAAoAJdMEhAAl2wiEuCQALDA8sEb8VLhdxICEZwCMhG3MBAgEABMMJSQsACwwNDg8sEcQVLhcfICEZ'
..'xSMhG8YdDglJCQALDA0ODywRxxUuFx8ZyBvGHQ4JSQkACwwNDg8sEckVLhcfGcobxh0OCUkJAAsMDQ4PNxHLFWUXOhnMG80dDglJCwALDA0ODywRzhUuFx8gIRnPIyEbxh0OCUkJAAsMDQ4PNxHQFWUXOhnRG80dDgkBBwALDA0OEdIXHxnTG9QdDgkBBwALDA0OEdUX'
..'HxnWG9QdDgkBBwALDA0OEdcXHxnYG9QdDgkBBwALDA0OEdkXHxnaG9QdDgkBBwALDA0OEdsXHxncG90dDgkBCQALDA0ODywR3hUuFygZ3xvgHQ4JAQkACwwNDg8sEeEVLhcoGeIb4B0OCQEJAAsMDQ4PLBHjFS4XKBnkG+UdDgkBCgALDA0OEeYXKCAhGecjIRvoHQ7p'
..'6gkBCgALDA0OEesXKCAhGewjIRvoHQ7p6gkBCgALDA0OEe0XKCAhGe4jIRvoHQ7p6gkBCgALDA0OEe8XKCAhGfAjIRvoHQ7p6gA=')
for _,obj in pairs(Objects) do
	obj.Parent = script or workspace
end

RunScripts()
