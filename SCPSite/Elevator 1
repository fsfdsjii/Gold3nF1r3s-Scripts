-- Converted using Mokiros's Model to Script Version 3
-- Converted string size: 4024 characters

local ScriptFunctions = {
function(script,require)
script.Parent.TELE1.GUI.ClickDetector.MouseClick:Connect(function(plr)
	plr.Character:PivotTo(script.Parent.TELE2.WorldPivot+Vector3.new(0,3,0))
end)
script.Parent.TELE2.GUI.ClickDetector.MouseClick:Connect(function(plr)
	plr.Character:PivotTo(script.Parent.TELE1.WorldPivot+Vector3.new(0,3,0))
end)
script.Parent.TEAMTELE1.GUI.ClickDetector.MouseClick:Connect(function(plr)
	print(plr.." pressed the button.")
end)
end
}
local ScriptIndex = 0
local Scripts,ModuleScripts,ModuleCache = {},{},{}
local _require = require
function require(obj,...)
	local index = ModuleScripts[obj]
	if not index then
		local a,b = pcall(_require,obj,...)
		return not a and error(b,2) or b
	end
	
	local res = ModuleCache[index]
	if res then return res end
	res = ScriptFunctions[index](obj,require)
	if res==nil then error("Module code did not return exactly one value",2) end
	ModuleCache[index] = res
	return res
end
local function Script(obj,ismodule)
	ScriptIndex = ScriptIndex + 1
	local t = ismodule and ModuleScripts or Scripts
	t[obj] = ScriptIndex
end

function RunScripts()
	for script,index in pairs(Scripts) do
		coroutine.wrap(ScriptFunctions[index])(script,require)
	end
end


local function DecodeUnion(Values,Flags,Parse,data)
	local m = Instance.new("Folder")
	m.Name = "UnionCache ["..tostring(math.random(1,9999)).."]"
	m.Archivable = false
	m.Parent = game:GetService("ServerStorage")
	local Union,Subtract = {},{}
	if not data then
		data = Parse('B')
	end
	local ByteLength = (data % 4) + 1
	local Length = Parse('I'..ByteLength)
	local ValueFMT = ('I'..Flags[1])
	for i = 1,Length do
		local data = Parse('B')
		local part
		local isNegate = bit32.band(data,0b10000000) > 0
		local isUnion =  bit32.band(data,0b01000000) > 0
		if isUnion then
			part = DecodeUnion(Values,Flags,Parse,data)
		else
			local isMesh = data % 2 == 1
			local ClassName = Values[Parse(ValueFMT)]
			part = Instance.new(ClassName)
			part.Size = Values[Parse(ValueFMT)]
			part.Position = Values[Parse(ValueFMT)]
			part.Orientation = Values[Parse(ValueFMT)]
			if isMesh then
				local mesh = Instance.new("SpecialMesh")
				mesh.MeshType = Values[Parse(ValueFMT)]
				mesh.Scale = Values[Parse(ValueFMT)]
				mesh.Offset = Values[Parse(ValueFMT)]
				mesh.Parent = part
			end
		end
		part.Parent = m
		table.insert(isNegate and Subtract or Union,part)
	end
	local first = table.remove(Union,1)
	if #Union>0 then
		first = first:UnionAsync(Union)
	end
	if #Subtract>0 then
		first = first:SubtractAsync(Subtract)
	end
	m:Destroy()
	return first
end

local function Decode(str)
	local StringLength = #str
	
	-- Base64 decoding
	do
		local decoder = {}
		for b64code, char in pairs(('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='):split('')) do
			decoder[char:byte()] = b64code-1
		end
		local n = StringLength
		local t,k = table.create(math.floor(n/4)+1),1
		local padding = str:sub(-2) == '==' and 2 or str:sub(-1) == '=' and 1 or 0
		for i = 1, padding > 0 and n-4 or n, 4 do
			local a, b, c, d = str:byte(i,i+3)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40 + decoder[d]
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8),bit32.extract(v,0,8))
			k = k + 1
		end
		if padding == 1 then
			local a, b, c = str:byte(n-3,n-1)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8))
		elseif padding == 2 then
			local a, b = str:byte(n-3,n-2)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000
			t[k] = string.char(bit32.extract(v,16,8))
		end
		str = table.concat(t)
	end
	
	local Position = 1
	local function Parse(fmt)
		local Values = {string.unpack(fmt,str,Position)}
		Position = table.remove(Values)
		return table.unpack(Values)
	end
	
	local Settings = Parse('B')
	local Flags = Parse('B')
	Flags = {
		--[[ValueIndexByteLength]] bit32.extract(Flags,6,2)+1,
		--[[InstanceIndexByteLength]] bit32.extract(Flags,4,2)+1,
		--[[ConnectionsIndexByteLength]] bit32.extract(Flags,2,2)+1,
		--[[MaxPropertiesLengthByteLength]] bit32.extract(Flags,0,2)+1,
		--[[Use Double instead of Float]] bit32.band(Settings,0b1) > 0
	}
	
	local ValueFMT = ('I'..Flags[1])
	local InstanceFMT = ('I'..Flags[2])
	local ConnectionFMT = ('I'..Flags[3])
	local PropertyLengthFMT = ('I'..Flags[4])
	
	local ValuesLength = Parse(ValueFMT)
	local Values = table.create(ValuesLength)
	local CFrameIndexes = {}
	
	local ValueDecoders = {
		--!!Start
		[1] = function(Modifier)
			return Parse('s'..Modifier)
		end,
		--!!Split
		[2] = function(Modifier)
			return Modifier ~= 0
		end,
		--!!Split
		[3] = function()
			return Parse('d')
		end,
		--!!Split
		[4] = function(_,Index)
			table.insert(CFrameIndexes,{Index,Parse(('I'..Flags[1]):rep(3))})
		end,
		--!!Split
		[5] = {CFrame.new,Flags[5] and 'dddddddddddd' or 'ffffffffffff'},
		--!!Split
		[6] = {Color3.fromRGB,'BBB'},
		--!!Split
		[7] = {BrickColor.new,'I2'},
		--!!Split
		[8] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = ColorSequenceKeypoint.new(Parse('f'),Color3.fromRGB(Parse('BBB')))
			end
			return ColorSequence.new(kpts)
		end,
		--!!Split
		[9] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = NumberSequenceKeypoint.new(Parse(Flags[5] and 'ddd' or 'fff'))
			end
			return NumberSequence.new(kpts)
		end,
		--!!Split
		[10] = {Vector3.new,Flags[5] and 'ddd' or 'fff'},
		--!!Split
		[11] = {Vector2.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[12] = {UDim2.new,Flags[5] and 'di2di2' or 'fi2fi2'},
		--!!Split
		[13] = {Rect.new,Flags[5] and 'dddd' or 'ffff'},
		--!!Split
		[14] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Axes.new(unpack(t))
		end,
		--!!Split
		[15] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Faces.new(unpack(t))
		end,
		--!!Split
		[16] = {PhysicalProperties.new,Flags[5] and 'ddddd' or 'fffff'},
		--!!Split
		[17] = {NumberRange.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[18] = {UDim.new,Flags[5] and 'di2' or 'fi2'},
		--!!Split
		[19] = function()
			return Ray.new(Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')),Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')))
		end
		--!!End
	}
	
	for i = 1,ValuesLength do
		local TypeAndModifier = Parse('B')
		local Type = bit32.band(TypeAndModifier,0b11111)
		local Modifier = (TypeAndModifier - Type) / 0b100000
		local Decoder = ValueDecoders[Type]
		if type(Decoder)=='function' then
			Values[i] = Decoder(Modifier,i)
		else
			Values[i] = Decoder[1](Parse(Decoder[2]))
		end
	end
	
	for i,t in pairs(CFrameIndexes) do
		Values[t[1]] = CFrame.fromMatrix(Values[t[2]],Values[t[3]],Values[t[4]])
	end
	
	local InstancesLength = Parse(InstanceFMT)
	local Instances = {}
	local NoParent = {}
	
	for i = 1,InstancesLength do
		local ClassName = Values[Parse(ValueFMT)]
		local obj
		local MeshPartMesh,MeshPartScale
		if ClassName == "UnionOperation" then
			obj = DecodeUnion(Values,Flags,Parse)
			obj.UsePartColor = true
		elseif ClassName:find("Script") then
			obj = Instance.new("Folder")
			Script(obj,ClassName=='ModuleScript')
		elseif ClassName == "MeshPart" then
			obj = Instance.new("Part")
			MeshPartMesh = Instance.new("SpecialMesh")
			MeshPartMesh.MeshType = Enum.MeshType.FileMesh
			MeshPartMesh.Parent = obj
		else
			obj = Instance.new(ClassName)
		end
		local Parent = Instances[Parse(InstanceFMT)]
		local PropertiesLength = Parse(PropertyLengthFMT)
		local AttributesLength = Parse(PropertyLengthFMT)
		Instances[i] = obj
		for i = 1,PropertiesLength do
			local Prop,Value = Values[Parse(ValueFMT)],Values[Parse(ValueFMT)]
			
			-- ok this looks awful
			if MeshPartMesh then
				if Prop == "MeshId" then
					MeshPartMesh.MeshId = Value
					continue
				elseif Prop == "TextureID" then
					MeshPartMesh.TextureId = Value
					continue
				elseif Prop == "Size" then
					if not MeshPartScale then
						MeshPartScale = Value
					else
						MeshPartMesh.Scale = Value / MeshPartScale
					end
				elseif Prop == "MeshSize" then
					if not MeshPartScale then
						MeshPartScale = Value
						MeshPartMesh.Scale = obj.Size / Value
					else
						MeshPartMesh.Scale = MeshPartScale / Value
					end
					continue
				end
			end
			
			obj[Prop] = Value
		end
		if MeshPartMesh then
			if MeshPartMesh.MeshId=='' then
				if MeshPartMesh.TextureId=='' then
					MeshPartMesh.TextureId = 'rbxasset://textures/meshPartFallback.png'
				end
				MeshPartMesh.Scale = obj.Size
			end
		end
		for i = 1,AttributesLength do
			obj:SetAttribute(Values[Parse(ValueFMT)],Values[Parse(ValueFMT)])
		end
		if not Parent then
			table.insert(NoParent,obj)
		else
			obj.Parent = Parent
		end
	end
	
	local ConnectionsLength = Parse(ConnectionFMT)
	for i = 1,ConnectionsLength do
		local a,b,c = Parse(InstanceFMT),Parse(ValueFMT),Parse(InstanceFMT)
		Instances[a][Values[b]] = Instances[c]
	end
	
	return NoParent
end


local Objects = Decode('AADCIQVNb2RlbCEETmFtZSEKRWxldmF0b3IgMSEKV29ybGRQaXZvdAS1trchBVRFTEUxBLi2tyEEUGFydCEDVFAxIQhBbmNob3JlZCIhDUJvdHRvbVN1cmZhY2UDAAAAAAAAAAAhCkJyaWNrQ29sb3IHagAhBkNGcmFtZQQZtrchCkNhbkNvbGxpZGUCIQVDb2xvcgba'
..'hUEhCE1hdGVyaWFsAwAAAAAAwJhAIQhQb3NpdGlvbgpXoUvD5rh+QNmj8EAhBFNpemUKAACAPwAAgD8AAIA/IQpUb3BTdXJmYWNlIQxUcmFuc3BhcmVuY3kDAAAAAAAA8D8hCURCIEJ1dHRvbgdMAQQktrcGdQAAAwAAAAAAAHJACmdPUcPeBANAnLVIQQqZ8YA+wNKB'
..'PgrXozwhClN1cmZhY2VHdWkhDlpJbmRleEJlaGF2aW9yIRBDbGlwc0Rlc2NlbmRhbnRzIQ5MaWdodEluZmx1ZW5jZSENUGl4ZWxzUGVyU3R1ZAMAAAAAAAB5QCEKU2l6aW5nTW9kZSEFRnJhbWUhEEJhY2tncm91bmRDb2xvcjMG////IRZCYWNrZ3JvdW5kVHJhbnNw'
..'YXJlbmN5DAAAgD8AAAAAgD8AACEJVGV4dExhYmVsIQRGb250AwAAAAAAAAhAIQRUZXh0IQVEZWJ1ZyEKVGV4dENvbG9yMwYAAAAhClRleHRTY2FsZWQhCFRleHRTaXplAwAAAAAAACxAIQtUZXh0V3JhcHBlZCENQ2xpY2tEZXRlY3RvciEDR1VJBzYBBEK2twZbmkwK'
..'Z09Rw46NIUCctUhBIQREb3duB/QDBEe2twYhVLkKZ09Rw25OEkA8yEhBCpmZmT4Urkc/CtejPCEJU3BvdExpZ2h0IQpCcmlnaHRuZXNzAwAAAAAAAOA/BlX//yEHU2hhZG93cyEFQW5nbGUDAAAAAADAYkAhBVJhbmdlAwAAAAAAAChAB+sDBFW2twYREREKV1JSw25O'
..'EkA8yEhBCuekxz8Urkc/CtejPAfHAARbtrcGY19iAwAAAAAAgJBAClehS8PYihU+2aPwQApcj3pBKVwPPpmZSUEhDlVuaW9uT3BlcmF0aW9uBF+2twpHoUvD2IoVPtmj8EAKmMKBQSpcDz6wR1FBIQxVc2VQYXJ0Q29sb3IKuB59QetROD4ehUtBCkehS8O4BSo+2aPw'
..'QAoAAAAAAAAAAAAAAAAKj8KBQSlcDz6uR1FBCkihS8PYihU+2aPwQAftAwRqtrcG7tICClehS8PYSgs+2aPwQArNzIBBj8L1PShcT0EEbra3AwAAAAAAgIlAClehS8Owqe092aPwQApwPY5BCtejPcL1aEEEdLm6AwAAAAAAAJFAIQtPcmllbnRhdGlvbgoAAAAAAAA0'
..'QwAAAAAKVyFSw1vQtz+EmVFBIQhSb3RhdGlvbgoAADTDAAAAAAAANMMKAKQQQHoULkBAXI8/Cq5HAUBe+w9AmZmZPwpYIVLD7tIrP5SZUUEK16MQQHoULkAnXI8/ClchUsNb0Lc/jJlRQSEFVEVMRTIEu7y3BIC9twoAAAAAAAC0QgAAAAAKW6WFRXpSeEDkzNRCBIK9'
..'twqNzYVF5Dz5Pw4p4EIEhL23Co3NhUUiJxtADingQiECVXAEh723CpbNhUUC6AtADingQgSJvbcKls2FRQLoC0D4LuJCBIu9twpbpYVFgJA8PeTM1EIEjb23ClulhUWAkDw94szUQgpbpYVFAT6HPd/M1EIKAAAAAAAANMMAAAAAClulhUV+kDw94czUQgSSvbcKW6WF'
..'RYCQEz3kzNRCBJS9twpbpYVFAHGDPOTM1EIEl763CgAAAAAAALTCAAAAAAoA0oVFhAOrP+TM4UIKTUQBQF77D0CZmZk/CgDShUVAORI/5czhQgrXoxBAehQuQGdYjz8KANKFRYQDqz/jzOFCIQZTY3JpcHQhCVRFQU1URUxFMQS/trcEoMC3CkfzUsPeBANAPTO1wQSi'
..'wLcKR/NSw46NIUA9M7XBBKTAtwpH81LDbk4SQI08tcEEpsC3ClfwUcNuThJAjTy1wQSotrcKV6FLw9iKFT7heozBBKq2twpHoUvD2IoVPuF6jMEKR6FLw7gFKj7heozBCkihS8PYihU+4XqMwQSutrcKV6FLw9hKCz7heozBBLC2twpXoUvDsKntPeF6jMEEssHCClch'
..'UsNb0Lc/MaW5wQpWIVLD7tIrPzmlucEKVyFSw1vQtz81pbnBCqfDA0Wy5gpAf2GUQgoAAIA/AAAAAAAAAAAKAAAAAAAAgD8AAAAAClehS8Mb0Lc/2aPwQAoAAIC/Lr27M+2tCSgKLr27MwAAgD8uvbszClulhUVEA6s/5MzUQgoAAAAAAAAAAAAAgL8KLr07swAAAAAA'
..'AIC/Ci69O7MAAAAAAACAPwpXoUvDG9C3P+F6jMEKAACAvwAAAAAAAAAACgAAgD8uvbsz7a0JqAouvbuzAACAPy69u7M9AQACAAIDBAUBAQIAAgYEBwgCDAACCQoLDA0ODxAREhMUFRYXGBkaGxwNHR4IAgoAAh8KCwwNDiAQIRQiFiMYJBolHA0mBAUAJx4oCykeKiss'
..'Hi0FAwAuLzAeGjEyBgkALi8wHhoxMzQ1Njc4OQs6OzwLPQQAAAgCCgACPgoLDA0OPxBAFEEWIxhCGiUcDSYJBQAnHigLKR4qKyweLQoDAC4vMB4aMTILCQAuLzAeGjEzNDVDNzg5Czo7PAs9CQAACAIJAAoLDA0ORBBFFEYWIxhHGkgcDUkOBQBKSxRMTQtOT1BRCAIJ'
..'AAoLDA0OUhBTFFQWIxhVGlYcDQgCCQAKCwwNDlcQWBRZFloYWxpcHA1dQAKACGJjZAAIZWZkAggACgsOVxBeFFkWWhhfGmBhCwgCCQAKCwwNDmcQaBRpFloYahprHA0IAgcACgsMDRBsFm0YbhpvHA1dQAKACHh5ZAAIentzAgoACgsOVxBwFFkWcXJzGHR1dhp3YQsB'
..'AQIAAnwEfQgWDQACCQoLDA0ODxB+EhMUFRYXcn8YgHV/GhscDQgWDAACHwoLDA0OIBCBFCIWI3J/GIJ1fxolHA0mGAUAJx4oCykeKissHi0ZAwAuLzAeGjEyGgkALi8wHhoxMzQ1Njc4OQs6OzwLPRgAAAgWDAACPgoLDA0OPxCDFEEWI3J/GIR1fxolHA0mHQUAJx4o'
..'CykeKissHi0eAwAuLzAeGjEyHwkALi8wHhoxMzQ1hTc4OQs6OzwLPR0AAAgWCwAKCwwNDkQQhhRGFiNyfxiHdX8aSBwNSSIFAEpLFExNC05PUFEIFgsACgsMDQ5SEIgUVBYjcn8YiXV/GlYcDQgWCwAKCwwNDlcQihRZFlpyfxiLdX8aXBwNXUACgAhijo8ACGWQfxYK'
..'AAoLDlcQjBRZFlpyfxiNdX8aYGELCBYLAAoLDA0OZxCRFGkWWnJ/GJJ1fxprHA0IFgkACgsMDRCTFm1yfxiUdX8abxwNXUACgAiYmY8ACJqblhYKAAoLDlcQlRRZFnFylhiXdZYad2ELnAEAAAEBAgACnQSeCCsMAAIfCgsMDQ4gEJ8UIhYjcnMYoHV2GiUcDSYsBQAn'
..'HigLKR4qKyweLS0DAC4vMB4aMTIuCQAuLzAeGjEzNDU2Nzg5Czo7PAs9LAAACCsMAAI+CgsMDQ4/EKEUQRYjcnMYonV2GiUcDSYxBQAnHigLKR4qKyweLTIDAC4vMB4aMTIzCQAuLzAeGjEzNDVDNzg5Czo7PAs9MQAACCsLAAoLDA0ORBCjFEYWI3JzGKR1dhpIHA1J'
..'NgUASksUTE0LTk9QUQgrCwAKCwwNDlIQpRRUFiNycximdXYaVhwNCCsJAAoLDA0OVxCnFFkWWhioGlwcDV1AAoAIYqtkAAhlrGQrCAAKCw5XEKkUWRZaGKoaYGELCCsJAAoLDA0OZxCtFGkWWhiuGmscDQgrBwAKCwwNEK8WbRiwGm8cDV1AAoAIeLNzAAh6tGQrCAAK'
..'Cw5XELEUWRZxGLIad2ELAA==')
for _,obj in pairs(Objects) do
	obj.Parent = script or workspace
end

RunScripts()
