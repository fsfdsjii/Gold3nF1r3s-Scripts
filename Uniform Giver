-- Converted using Mokiros's Model to Script Version 3
-- Converted string size: 3644 characters

local ScriptFunctions = {
function(script,require)
-- Uniform Giver
-- Gullet
-- 2015/02/01

-- Tags --

local pantsId = script.Parent.Parent.Coathanger.Pants.PantsTemplate
local shirtId = script.Parent.Parent.Coathanger.Shirt.ShirtTemplate
local cPart = script.Parent
local cDetector = script.Parent.ClickDetector




-- Functions --

local function playSoundLocal(sId,sParent)
	local sound = Instance.new("Sound",sParent)
	sound.SoundId = "http://www.roblox.com/asset/?id="..sId
	sound:Play()
	sound:Destroy()
end

local function onClicked(player)
	print(player.Name.." clicked on Uniform Giver")
	
	playSoundLocal(152206246,player)	-- Declaring the sound ID and Parent
	
	
	
	
	local foundShirt = player.Character:FindFirstChild("Shirt") -- Tries to find Shirt
	if not foundShirt then -- if there is no shirt
		print("No shirt found, creating for "..player.Name)
		local newShirt = Instance.new("Shirt",player.Character)
		newShirt.Name = "Shirt"
	else if foundShirt then -- if there is a shirt
		print("Shirt found, reconstructing for "..player.Name)
		player.Character.Shirt:remove()
		local newShirt = Instance.new("Shirt",player.Character)
		newShirt.Name = "Shirt"
	end
	end
	
	
	
	
	local foundPants = player.Character:FindFirstChild("Pants") -- Tries to find Pants
	if not foundPants then -- if there are no pants
		print("No pants found, creating for "..player.Name)
		local newPants = Instance.new("Pants",player.Character)
		newPants.Name = "Pants"
	else if foundPants then -- if there are pants
		print("Pants found, reconstructing for "..player.Name)
		player.Character.Pants:remove()
		local newPants = Instance.new("Pants",player.Character)
		newPants.Name = "Pants"
	end
	end
	
	player.Character.Shirt.ShirtTemplate = shirtId
	player.Character.Pants.PantsTemplate = pantsId
	end




local function onHoverEnter(player)
	cPart.Transparency = .1
	cPart.BrickColor = BrickColor.White()
end



local function onHoverLeave(player)
	cPart.BrickColor = BrickColor.Gray()
	cPart.Transparency = .2
end


-- Binds --

cDetector.MouseHoverEnter:connect(onHoverEnter)
cDetector.MouseHoverLeave:connect(onHoverLeave)
cDetector.MouseClick:connect(onClicked)




end,
function(script,require)
-- Uniform Giver
-- Gullet
-- 2015/02/01

-- Tags --

local pantsId = script.Parent.Parent.Coathanger.Pants.PantsTemplate
local shirtId = script.Parent.Parent.Coathanger.Shirt.ShirtTemplate
local cPart = script.Parent
local cDetector = script.Parent.ClickDetector




-- Functions --

local function playSoundLocal(sId,sParent)
	local sound = Instance.new("Sound",sParent)
	sound.SoundId = "http://www.roblox.com/asset/?id="..sId
	sound:Play()
	sound:Destroy()
end

local function onClicked(player)
	print(player.Name.." clicked on Uniform Giver")
	
	playSoundLocal(152206246,player)	-- Declaring the sound ID and Parent
	
	
	
	
	local foundShirt = player.Character:FindFirstChild("Shirt") -- Tries to find Shirt
	if not foundShirt then -- if there is no shirt
		print("No shirt found, creating for "..player.Name)
		local newShirt = Instance.new("Shirt",player.Character)
		newShirt.Name = "Shirt"
	else if foundShirt then -- if there is a shirt
		print("Shirt found, reconstructing for "..player.Name)
		player.Character.Shirt:remove()
		local newShirt = Instance.new("Shirt",player.Character)
		newShirt.Name = "Shirt"
	end
	end
	
	
	
	
	local foundPants = player.Character:FindFirstChild("Pants") -- Tries to find Pants
	if not foundPants then -- if there are no pants
		print("No pants found, creating for "..player.Name)
		local newPants = Instance.new("Pants",player.Character)
		newPants.Name = "Pants"
	else if foundPants then -- if there are pants
		print("Pants found, reconstructing for "..player.Name)
		player.Character.Pants:remove()
		local newPants = Instance.new("Pants",player.Character)
		newPants.Name = "Pants"
	end
	end
	
	player.Character.Shirt.ShirtTemplate = shirtId
	player.Character.Pants.PantsTemplate = pantsId
	end




local function onHoverEnter(player)
	cPart.Transparency = .1
	cPart.BrickColor = BrickColor.White()
end



local function onHoverLeave(player)
	cPart.BrickColor = BrickColor.Gray()
	cPart.Transparency = .2
end


-- Binds --

cDetector.MouseHoverEnter:connect(onHoverEnter)
cDetector.MouseHoverLeave:connect(onHoverLeave)
cDetector.MouseClick:connect(onClicked)




end
}
local ScriptIndex = 0
local Scripts,ModuleScripts,ModuleCache = {},{},{}
local _require = require
function require(obj,...)
	local index = ModuleScripts[obj]
	if not index then
		local a,b = pcall(_require,obj,...)
		return not a and error(b,2) or b
	end
	
	local res = ModuleCache[index]
	if res then return res end
	res = ScriptFunctions[index](obj,require)
	if res==nil then error("Module code did not return exactly one value",2) end
	ModuleCache[index] = res
	return res
end
local function Script(obj,ismodule)
	ScriptIndex = ScriptIndex + 1
	local t = ismodule and ModuleScripts or Scripts
	t[obj] = ScriptIndex
end
function RunScripts()
	for script, index in pairs(Scripts) do
		coroutine.wrap(function()
			ScriptFunctions[index](script, require)
		end)()
	end
end
local function DecodeUnion(Values,Flags,Parse,data)
	local m = Instance.new("Folder")
	m.Name = "UnionCache ["..tostring(math.random(1,9999)).."]"
	m.Archivable = false
	m.Parent = game:GetService("ServerStorage")
	local Union,Subtract = {},{}
	if not data then
		data = Parse('B')
	end
	local ByteLength = (data % 4) + 1
	local Length = Parse('I'..ByteLength)
	local ValueFMT = ('I'..Flags[1])
	for i = 1,Length do
		local data = Parse('B')
		local part
		local isNegate = bit32.band(data,0b10000000) > 0
		local isUnion =  bit32.band(data,0b01000000) > 0
		if isUnion then
			part = DecodeUnion(Values,Flags,Parse,data)
		else
			local isMesh = data % 2 == 1
			local ClassName = Values[Parse(ValueFMT)]
			part = Instance.new(ClassName)
			part.Size = Values[Parse(ValueFMT)]
			part.Position = Values[Parse(ValueFMT)]
			part.Orientation = Values[Parse(ValueFMT)]
			if isMesh then
				local mesh = Instance.new("SpecialMesh")
				mesh.MeshType = Values[Parse(ValueFMT)]
				mesh.Scale = Values[Parse(ValueFMT)]
				mesh.Offset = Values[Parse(ValueFMT)]
				mesh.Parent = part
			end
		end
		part.Parent = m
		table.insert(isNegate and Subtract or Union,part)
	end
	local first = table.remove(Union,1)
	if #Union>0 then
		first = first:UnionAsync(Union)
	end
	if #Subtract>0 then
		first = first:SubtractAsync(Subtract)
	end
	m:Destroy()
	return first
end

local function Decode(str)
	local StringLength = #str
	
	-- Base64 decoding
	do
		local decoder = {}
		for b64code, char in pairs(('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='):split('')) do
			decoder[char:byte()] = b64code-1
		end
		local n = StringLength
		local t,k = table.create(math.floor(n/4)+1),1
		local padding = str:sub(-2) == '==' and 2 or str:sub(-1) == '=' and 1 or 0
		for i = 1, padding > 0 and n-4 or n, 4 do
			local a, b, c, d = str:byte(i,i+3)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40 + decoder[d]
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8),bit32.extract(v,0,8))
			k = k + 1
		end
		if padding == 1 then
			local a, b, c = str:byte(n-3,n-1)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8))
		elseif padding == 2 then
			local a, b = str:byte(n-3,n-2)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000
			t[k] = string.char(bit32.extract(v,16,8))
		end
		str = table.concat(t)
	end
	
	local Position = 1
	local function Parse(fmt)
		local Values = {string.unpack(fmt,str,Position)}
		Position = table.remove(Values)
		return table.unpack(Values)
	end
	
	local Settings = Parse('B')
	local Flags = Parse('B')
	Flags = {
		--[[ValueIndexByteLength]] bit32.extract(Flags,6,2)+1,
		--[[InstanceIndexByteLength]] bit32.extract(Flags,4,2)+1,
		--[[ConnectionsIndexByteLength]] bit32.extract(Flags,2,2)+1,
		--[[MaxPropertiesLengthByteLength]] bit32.extract(Flags,0,2)+1,
		--[[Use Double instead of Float]] bit32.band(Settings,0b1) > 0
	}
	
	local ValueFMT = ('I'..Flags[1])
	local InstanceFMT = ('I'..Flags[2])
	local ConnectionFMT = ('I'..Flags[3])
	local PropertyLengthFMT = ('I'..Flags[4])
	
	local ValuesLength = Parse(ValueFMT)
	local Values = table.create(ValuesLength)
	local CFrameIndexes = {}
	
	local ValueDecoders = {
		--!!Start
		[1] = function(Modifier)
			return Parse('s'..Modifier)
		end,
		--!!Split
		[2] = function(Modifier)
			return Modifier ~= 0
		end,
		--!!Split
		[3] = function()
			return Parse('d')
		end,
		--!!Split
		[4] = function(_,Index)
			table.insert(CFrameIndexes,{Index,Parse(('I'..Flags[1]):rep(3))})
		end,
		--!!Split
		[5] = {CFrame.new,Flags[5] and 'dddddddddddd' or 'ffffffffffff'},
		--!!Split
		[6] = {Color3.fromRGB,'BBB'},
		--!!Split
		[7] = {BrickColor.new,'I2'},
		--!!Split
		[8] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = ColorSequenceKeypoint.new(Parse('f'),Color3.fromRGB(Parse('BBB')))
			end
			return ColorSequence.new(kpts)
		end,
		--!!Split
		[9] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = NumberSequenceKeypoint.new(Parse(Flags[5] and 'ddd' or 'fff'))
			end
			return NumberSequence.new(kpts)
		end,
		--!!Split
		[10] = {Vector3.new,Flags[5] and 'ddd' or 'fff'},
		--!!Split
		[11] = {Vector2.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[12] = {UDim2.new,Flags[5] and 'di2di2' or 'fi2fi2'},
		--!!Split
		[13] = {Rect.new,Flags[5] and 'dddd' or 'ffff'},
		--!!Split
		[14] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Axes.new(unpack(t))
		end,
		--!!Split
		[15] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Faces.new(unpack(t))
		end,
		--!!Split
		[16] = {PhysicalProperties.new,Flags[5] and 'ddddd' or 'fffff'},
		--!!Split
		[17] = {NumberRange.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[18] = {UDim.new,Flags[5] and 'di2' or 'fi2'},
		--!!Split
		[19] = function()
			return Ray.new(Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')),Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')))
		end
		--!!End
	}
	
	for i = 1,ValuesLength do
		local TypeAndModifier = Parse('B')
		local Type = bit32.band(TypeAndModifier,0b11111)
		local Modifier = (TypeAndModifier - Type) / 0b100000
		local Decoder = ValueDecoders[Type]
		if type(Decoder)=='function' then
			Values[i] = Decoder(Modifier,i)
		else
			Values[i] = Decoder[1](Parse(Decoder[2]))
		end
	end
	
	for i,t in pairs(CFrameIndexes) do
		Values[t[1]] = CFrame.fromMatrix(Values[t[2]],Values[t[3]],Values[t[4]])
	end
	
	local InstancesLength = Parse(InstanceFMT)
	local Instances = {}
	local NoParent = {}
	
	for i = 1,InstancesLength do
		local ClassName = Values[Parse(ValueFMT)]
		local obj
		local MeshPartMesh,MeshPartScale
		if ClassName == "UnionOperation" then
			obj = DecodeUnion(Values,Flags,Parse)
			obj.UsePartColor = true
		elseif ClassName:find("Script") then
			obj = Instance.new("Folder")
			Script(obj,ClassName=='ModuleScript')
		elseif ClassName == "MeshPart" then
			obj = Instance.new("Part")
			MeshPartMesh = Instance.new("SpecialMesh")
			MeshPartMesh.MeshType = Enum.MeshType.FileMesh
			MeshPartMesh.Parent = obj
		else
			obj = Instance.new(ClassName)
		end
		local Parent = Instances[Parse(InstanceFMT)]
		local PropertiesLength = Parse(PropertyLengthFMT)
		local AttributesLength = Parse(PropertyLengthFMT)
		Instances[i] = obj
		for i = 1,PropertiesLength do
			local Prop,Value = Values[Parse(ValueFMT)],Values[Parse(ValueFMT)]
			
			-- ok this looks awful
			if MeshPartMesh then
				if Prop == "MeshId" then
					MeshPartMesh.MeshId = Value
					continue
				elseif Prop == "TextureID" then
					MeshPartMesh.TextureId = Value
					continue
				elseif Prop == "Size" then
					if not MeshPartScale then
						MeshPartScale = Value
					else
						MeshPartMesh.Scale = Value / MeshPartScale
					end
				elseif Prop == "MeshSize" then
					if not MeshPartScale then
						MeshPartScale = Value
						MeshPartMesh.Scale = obj.Size / Value
					else
						MeshPartMesh.Scale = MeshPartScale / Value
					end
					continue
				end
			end
			
			obj[Prop] = Value
		end
		if MeshPartMesh then
			if MeshPartMesh.MeshId=='' then
				if MeshPartMesh.TextureId=='' then
					MeshPartMesh.TextureId = 'rbxasset://textures/meshPartFallback.png'
				end
				MeshPartMesh.Scale = obj.Size
			end
		end
		for i = 1,AttributesLength do
			obj:SetAttribute(Values[Parse(ValueFMT)],Values[Parse(ValueFMT)])
		end
		if not Parent then
			table.insert(NoParent,obj)
		else
			obj.Parent = Parent
		end
	end
	
	local ConnectionsLength = Parse(ConnectionFMT)
	for i = 1,ConnectionsLength do
		local a,b,c = Parse(InstanceFMT),Parse(ValueFMT),Parse(InstanceFMT)
		Instances[a][Values[b]] = Instances[c]
	end
	
	return NoParent
end


local Objects = Decode('AACvIQVNb2RlbCEETmFtZSENVW5pZm9ybSBHaXZlciEKV29ybGRQaXZvdASbnJ0hBFBhcnQhCUNsaWNrUGFydCEIQW5jaG9yZWQiIQ1Cb3R0b21TdXJmYWNlAwAAAAAAAAAAIQZDRnJhbWUED5ydIQhQb3NpdGlvbgrksFjCYM2MP8aXBUMhBFNpemUKAACAQAAAgD8A'
..'AEBAIQpUb3BTdXJmYWNlIQxUcmFuc3BhcmVuY3kDAAAAAJqZuT8hDUNsaWNrRGV0ZWN0b3IhFU1heEFjdGl2YXRpb25EaXN0YW5jZQMAAAAAAAAkQCEGU2NyaXB0IQpTdXJmYWNlR3VpIQVGcmFtZSEQQmFja2dyb3VuZENvbG9yMwb///8hFkJhY2tncm91bmRUcmFu'
..'c3BhcmVuY3kDAAAAAAAA8D8hD0JvcmRlclNpemVQaXhlbAwAAIA/AAAAAIA/AAAhCkltYWdlTGFiZWwMAAAAP7X/AAAAAEEADAAAAADIAAAAAAD0ASEFSW1hZ2UhKGh0dHA6Ly93d3cucm9ibG94LmNvbS9hc3NldC8/aWQ9NDM1NTY4OTEhCkNvYXRoYW5nZXIEnp+g'
..'IQRIZWFkIQpCcmlja0NvbG9yB+oDBDChoiEKQ2FuQ29sbGlkZQIhBUNvbG9yBs3NzQrRsFjCgjHDQMmXBUMKAAAAQAAAgD8AAIA/IQtTcGVjaWFsTWVzaCEFU2NhbGUKAACgPwAAoD8AAKA/IQlSaWdodCBBcm0EOaOkIQtPcmllbnRhdGlvbgqPwvW9H4W7wIXrAUAK'
..'0LBSwjwxk0DGlwVDIQhSb3RhdGlvbgqPwvW9H4W7wNejAEAKAACAPwAAAEAAAIA/IQVUb3JzbwRAn6AKAAAAAClcj8AAAAAACtGwWMI8MZNAxpcFQwoAAABAAAAAQAAAgD8hBURlY2FsIQZyb2Jsb3ghCExlZnQgQXJtBEelpgquR9FAuB5lwKRwvcAK6X5ewnjSk0Ao'
..'ZAVDCpqZ0UAzM2PA7FGwwCEITGVmdCBMZWcETKeoClK4DkCkcA3A7FG4vQrRsFrCHGgmQMOXBUMKUrgOQM3MDMAAAAAAIQlSaWdodCBMZWcEUamqCvYobMCF68FArkeBQAppQVbC9GMnQE+3BUMKpHBtwJqZwUCPwo1AIQVQYW50cyENUGFudHNUZW1wbGF0ZSEqaHR0'
..'cDovL3d3dy5yb2Jsb3guY29tL2Fzc2V0Lz9pZD0zMTEyMjAwMDc5IQVTaGlydCENU2hpcnRUZW1wbGF0ZSEqaHR0cDovL3d3dy5yb2Jsb3guY29tL2Fzc2V0Lz9pZD0zMTEyMTk0Njg4IQhIdW1hbm9pZCEGSGVhbHRoIQlNYXhIZWFsdGghCVdhbGtTcGVlZCEFU3Rh'
..'bmQEq5ydIQ5Vbmlvbk9wZXJhdGlvbgfCAARlnJ0Go6KlIQhNYXRlcmlhbAMAAAAAAACRQArksFjCaGZGQMaXB0MKAQCAQAIAoEAAAIA/IQlXZWRnZVBhcnQK5LBewmpmJkDGlwdDCgAAAAAAALRCAAAAAAoAAABAAACAQAAAgD8K5LBYwmpmZkDGlwdDCgAAAAAAAAAA'
..'AAAAAArksFLCamYmQMaXB0MKAAAAAAAAtMIAAAAACgAAgEAAAIA/AACAPwrksFjC1MyMP8aXB0MEdJysAwAAAAAAgJBACgAAtEIAAAAAAAAAAAp+SlrCiDKjQC1+BkMKmpmZPwAAAEAAAIA/IQxDeWxpbmRlck1lc2gKAACAPwAAgD/NzEw+BHmcrApLF1fCiDKjQCx+'
..'BkMEe5ydCuSwWMKIMqNALP4FQwqamZk/mpkZP5qZGT8ErZydBH+cnQrksDjCYM2MP8aXBUMErp+gBIKhogrRsDjCgjHDQMmXBUMEhKOkCtCwMsI8MZNAxpcFQwSGn6AK0bA4wjwxk0DGlwVDBIilpgrpfj7CeNKTQChkBUMEiqeoCtGwOsIcaCZAw5cFQwSMqaoKaUE2'
..'wvRjJ0BPtwVDISpodHRwOi8vd3d3LnJvYmxveC5jb20vYXNzZXQvP2lkPTMxMTIxOTU1ODgEr5ydBJCcnQrksDjCaGZGQMaXB0MK5LA+wmpmJkDGlwdDCuSwOMJqZmZAxpcHQwrksDLCamYmQMaXB0MK5LA4wtTMjD/GlwdDBJacrAp+SjrCiDKjQC1+BkMEmJysCksX'
..'N8KIMqNALH4GQwSanJ0K5LA4wogyo0As/gVDCpisWMLUZGZAxhcGQwr8/38/VAFLL+v/nbMKA9VKLwAAgD8AANmvCkbAWMKycIJAeJcFQwpmN38/5jgkti0boD0K5/mGNAAAgD9FuOs3Cvz/fz/Eg6gvEgueswrOgJcuAACAP9UA7DcKKIF+P/XsED0K0tA9Ck1ED73P'
..'1n8/fqm8uwp/U34/QODRveYPTj0KImHEPdT6fD/9k/Q9CnjPfz/WkcS6gncdPQoe8ym1Jc5/P2O7Hz0KgNB9P9jijz3k8uC9CvpBnb3r1X4/8/JmvQrksFjCaGZGQPnKBkMKCQBxNAAA2K8AAIA/CpisOMLUZGZAxhcGQwpGwDjCsnCCQHiXBUMK5LA4wmhmRkD5ygZD'
..'NAEAAgACAwQFBgEIAAIHCAkKCwwNDg8QERILExQVAgEAFhcYAgAAGQIAABoFBAAbHB0eHwsQICEGBQAbHB0eDiIQIyQlAQECAAImBCcGCAsAAigICQoLKSoMKywtLi8OMBAxEgsTHjIJAQAzNAYICwACNQgJCgspKgw2Li83OA45OjsQPBILBggLAAI9CAkKCykqDD4u'
..'Lzc/DkA6PxBBEgtCDAEAAkMGCAsAAkQICQoLKSoMRS4vN0YORzpIEDwSCwYICwACSQgJCgspKgxKLi83Sw5MOk0QPBILBggLAAJOCAkKCykqDE8uLzdQDlE6UhA8EgtTCAIAAlNUVVYIAgACVldYWQgDAFoLWwtcCwEBAgACXQReX0AEAGc8aGkABmprbABnPG1uAAZv'
..'cGwUBwAICSlgDGEuYmNkDmUQZgYUCQAICQoLDHFjcjdzDnQ6cxB1Egt2FgEAM3cGFAkACAkKCwx4Y3I3cw55OnMQdRILdhgBADN3BhQGAAgJCgsMeg57EHwSCwEAAgACAwR9BhsIAAIHCAkKCwx+Dn8QERILExQVHAEAFhcYHAAAGRwAABofBAAbHB0eHwsQICEgBQAb'
..'HB0eDiIQIyQlARsCAAImBIAGIgsAAigICQoLKSoMgSwtLi8OghAxEgsTHjIjAQAzNAYiCwACNQgJCgspKgyDLi83OA6EOjsQPBILBiILAAI9CAkKCykqDIUuLzc/DoY6PxBBEgtCJgEAAkMGIgsAAkQICQoLKSoMhy4vN0YOiDpIEDwSCwYiCwACSQgJCgspKgyJLi83'
..'Sw6KOk0QPBILBiILAAJOCAkKCykqDIsuLzdQDow6UhA8EgtTIgIAAlNUVVYiAgACVleNWSIDAFoLWwtcCwEbAgACXQSOX0AEAGc8kWkABmqSbABnPJNuAAZvlGwuBwAICSlgDI8uYmNkDpAQZgYuCQAICQoLDJVjcjdzDpY6cxB1Egt2MAEAM3cGLgkACAkKCwyXY3I3'
..'cw6YOnMQdRILdjIBADN3Bi4GAAgJCgsMmQ6aEHwSCwA=')
for _,obj in pairs(Objects) do
	obj.Parent = script or workspace
end

RunScripts()
