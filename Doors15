-- Converted using Mokiros's Model to Script Version 3
-- Converted string size: 6372 characters
local function Decode(str)
	local StringLength = #str
	
	-- Base64 decoding
	do
		local decoder = {}
		for b64code, char in pairs(('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='):split('')) do
			decoder[char:byte()] = b64code-1
		end
		local n = StringLength
		local t,k = table.create(math.floor(n/4)+1),1
		local padding = str:sub(-2) == '==' and 2 or str:sub(-1) == '=' and 1 or 0
		for i = 1, padding > 0 and n-4 or n, 4 do
			local a, b, c, d = str:byte(i,i+3)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40 + decoder[d]
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8),bit32.extract(v,0,8))
			k = k + 1
		end
		if padding == 1 then
			local a, b, c = str:byte(n-3,n-1)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8))
		elseif padding == 2 then
			local a, b = str:byte(n-3,n-2)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000
			t[k] = string.char(bit32.extract(v,16,8))
		end
		str = table.concat(t)
	end
	
	local Position = 1
	local function Parse(fmt)
		local Values = {string.unpack(fmt,str,Position)}
		Position = table.remove(Values)
		return table.unpack(Values)
	end
	
	local Settings = Parse('B')
	local Flags = Parse('B')
	Flags = {
		--[[ValueIndexByteLength]] bit32.extract(Flags,6,2)+1,
		--[[InstanceIndexByteLength]] bit32.extract(Flags,4,2)+1,
		--[[ConnectionsIndexByteLength]] bit32.extract(Flags,2,2)+1,
		--[[MaxPropertiesLengthByteLength]] bit32.extract(Flags,0,2)+1,
		--[[Use Double instead of Float]] bit32.band(Settings,0b1) > 0
	}
	
	local ValueFMT = ('I'..Flags[1])
	local InstanceFMT = ('I'..Flags[2])
	local ConnectionFMT = ('I'..Flags[3])
	local PropertyLengthFMT = ('I'..Flags[4])
	
	local ValuesLength = Parse(ValueFMT)
	local Values = table.create(ValuesLength)
	local CFrameIndexes = {}
	
	local ValueDecoders = {
		--!!Start
		[1] = function(Modifier)
			return Parse('s'..Modifier)
		end,
		--!!Split
		[2] = function(Modifier)
			return Modifier ~= 0
		end,
		--!!Split
		[3] = function()
			return Parse('d')
		end,
		--!!Split
		[4] = function(_,Index)
			table.insert(CFrameIndexes,{Index,Parse(('I'..Flags[1]):rep(3))})
		end,
		--!!Split
		[5] = {CFrame.new,Flags[5] and 'dddddddddddd' or 'ffffffffffff'},
		--!!Split
		[6] = {Color3.fromRGB,'BBB'},
		--!!Split
		[7] = {BrickColor.new,'I2'},
		--!!Split
		[8] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = ColorSequenceKeypoint.new(Parse('f'),Color3.fromRGB(Parse('BBB')))
			end
			return ColorSequence.new(kpts)
		end,
		--!!Split
		[9] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = NumberSequenceKeypoint.new(Parse(Flags[5] and 'ddd' or 'fff'))
			end
			return NumberSequence.new(kpts)
		end,
		--!!Split
		[10] = {Vector3.new,Flags[5] and 'ddd' or 'fff'},
		--!!Split
		[11] = {Vector2.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[12] = {UDim2.new,Flags[5] and 'di2di2' or 'fi2fi2'},
		--!!Split
		[13] = {Rect.new,Flags[5] and 'dddd' or 'ffff'},
		--!!Split
		[14] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Axes.new(unpack(t))
		end,
		--!!Split
		[15] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Faces.new(unpack(t))
		end,
		--!!Split
		[16] = {PhysicalProperties.new,Flags[5] and 'ddddd' or 'fffff'},
		--!!Split
		[17] = {NumberRange.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[18] = {UDim.new,Flags[5] and 'di2' or 'fi2'},
		--!!Split
		[19] = function()
			return Ray.new(Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')),Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')))
		end
		--!!End
	}
	
	for i = 1,ValuesLength do
		local TypeAndModifier = Parse('B')
		local Type = bit32.band(TypeAndModifier,0b11111)
		local Modifier = (TypeAndModifier - Type) / 0b100000
		local Decoder = ValueDecoders[Type]
		if type(Decoder)=='function' then
			Values[i] = Decoder(Modifier,i)
		else
			Values[i] = Decoder[1](Parse(Decoder[2]))
		end
	end
	
	for i,t in pairs(CFrameIndexes) do
		Values[t[1]] = CFrame.fromMatrix(Values[t[2]],Values[t[3]],Values[t[4]])
	end
	
	local InstancesLength = Parse(InstanceFMT)
	local Instances = {}
	local NoParent = {}
	
	for i = 1,InstancesLength do
		local ClassName = Values[Parse(ValueFMT)]
		local obj
		local MeshPartMesh,MeshPartScale
		if ClassName == "UnionOperation" then
			obj = DecodeUnion(Values,Flags,Parse)
			obj.UsePartColor = true
		elseif ClassName:find("Script") then
			obj = Instance.new("Folder")
			Script(obj,ClassName=='ModuleScript')
		elseif ClassName == "MeshPart" then
			obj = Instance.new("Part")
			MeshPartMesh = Instance.new("SpecialMesh")
			MeshPartMesh.MeshType = Enum.MeshType.FileMesh
			MeshPartMesh.Parent = obj
		else
			obj = Instance.new(ClassName)
		end
		local Parent = Instances[Parse(InstanceFMT)]
		local PropertiesLength = Parse(PropertyLengthFMT)
		local AttributesLength = Parse(PropertyLengthFMT)
		Instances[i] = obj
		for i = 1,PropertiesLength do
			local Prop,Value = Values[Parse(ValueFMT)],Values[Parse(ValueFMT)]
			
			-- ok this looks awful
			if MeshPartMesh then
				if Prop == "MeshId" then
					MeshPartMesh.MeshId = Value
					continue
				elseif Prop == "TextureID" then
					MeshPartMesh.TextureId = Value
					continue
				elseif Prop == "Size" then
					if not MeshPartScale then
						MeshPartScale = Value
					else
						MeshPartMesh.Scale = Value / MeshPartScale
					end
				elseif Prop == "MeshSize" then
					if not MeshPartScale then
						MeshPartScale = Value
						MeshPartMesh.Scale = obj.Size / Value
					else
						MeshPartMesh.Scale = MeshPartScale / Value
					end
					continue
				end
			end
			
			obj[Prop] = Value
		end
		if MeshPartMesh then
			if MeshPartMesh.MeshId=='' then
				if MeshPartMesh.TextureId=='' then
					MeshPartMesh.TextureId = 'rbxasset://textures/meshPartFallback.png'
				end
				MeshPartMesh.Scale = obj.Size
			end
		end
		for i = 1,AttributesLength do
			obj:SetAttribute(Values[Parse(ValueFMT)],Values[Parse(ValueFMT)])
		end
		if not Parent then
			table.insert(NoParent,obj)
		else
			obj.Parent = Parent
		end
	end
	
	local ConnectionsLength = Parse(ConnectionFMT)
	for i = 1,ConnectionsLength do
		local a,b,c = Parse(InstanceFMT),Parse(ValueFMT),Parse(InstanceFMT)
		Instances[a][Values[b]] = Instances[c]
	end
	
	return NoParent
end


local Objects = Decode('AADPIQZGb2xkZXIhBE5hbWUhDkxpZ2h0X0ZpeHR1cmVzIQVNb2RlbCEKTGlnaHRTdGFuZCELUHJpbWFyeVBhcnQhCldvcmxkUGl2b3QEHcnKIQhNZXNoUGFydCEMTGlnaHRGaXh0dXJlIQhBbmNob3JlZCIhCkJyaWNrQ29sb3IHaQEhBkNGcmFtZSEKQ2FuQ29sbGlk'
..'ZQIhCENhblRvdWNoIQpDYXN0U2hhZG93IRBDb2xsaXNpb25Hcm91cElkAwAAAAAAAPA/IQVDb2xvcgZUQDQhCE1hdGVyaWFsAwAAAAAAAJFAIQtPcmllbnRhdGlvbgoAAAAAAAC0wgAAAAAhCFBvc2l0aW9uCmYPTsIaZDRCQ+gDxCEIUm90YXRpb24hBFNpemUK+FOv'
..'P9vJHz/3Qjk/IQZNZXNoSWQhF3JieGFzc2V0aWQ6Ly82NTE2NDc3NDI3IQhNZXNoU2l6ZQqTGAVCYJlyQQijjEEhBVNvdW5kIQlQbGF5U291bmQhBkxvb3BlZCENUGxheWJhY2tTcGVlZAMAAACgKKH0PyEHUGxheWluZyESUm9sbE9mZk1heERpc3RhbmNlAwAAAAAA'
..'AE5AIRJSb2xsT2ZmTWluRGlzdGFuY2UhB1NvdW5kSWQhF3JieGFzc2V0aWQ6Ly80MjI3NTc5OTM1IQxUaW1lUG9zaXRpb24DdC90HGPNDEAhBlZvbHVtZQMAAABA4XrEPyEHQnVsYlphcAMAAAAg7Q3wPwMAAAAAAABZQAMAAAAAAAAAQCEXcmJ4YXNzZXRpZDovLzg4'
..'Mjk5Njk1MjEDAAAAQDMz0z8hFEVxdWFsaXplclNvdW5kRWZmZWN0IQhIaWdoR2FpbgMAAAAAAAAIQCEHTG93R2FpbgMAAAAAAAAQwCEHTWlkR2FpbgMAAAAAAAAAACEKUG9pbnRMaWdodCEKQnJpZ2h0bmVzcwMAAADgUbjOPwbrp2IhBVJhbmdlAwAAAAAAACJAIQRO'
..'ZW9uB2ABBEzJygbDoY0DAAAAAAAAckAKpvdMwg4rNkJD6APEIQtSZWZsZWN0YW5jZQMAAADAzMzcPwoBuwNAWJrxPlcOaD8hF3JieGFzc2V0aWQ6Ly82NTE2NDc3NDg2Cv//R0IwaDdB4iiwQSEKQXR0YWNobWVudARVy8wKifxvwQAAAAAAAAAACgBSFT8Qi/K+AIoj'
..'vwMAAAAAAADgPwb/tpQEWc3KCgBYGL+givK+AIwjvyEMQ2VudGVyQXR0YWNoBFzLzAoAAAAAsHsJvwAERL8hCVNwb3RMaWdodAb/sIshB1NoYWRvd3MhBUFuZ2xlAwAAAAAAgGZAAwAAAAAAgENAAwAAAKCZmbk/AwAAAAAAADVAIQVTdGFuZAdTAQRpycoGPC4mCqav'
..'T8LOfTRCQ+gDxAq7F9E/pNhuP/vLSz4hF3JieGFzc2V0aWQ6Ly82NTE2NDc3Mzc1Cke6HkJ4ULVBGLWaQARvzsoKAAAAAAAAtEIAAAAACoxxosEaZDRCY+gDxAMAAADA8sHyPwNsXVlvgBEJQAMAAADgVuzvPwR0zsoKDKGkwQ4rNkJj6APEBHbOygoMMZ/Bzn00QmPo'
..'A8QEeMnKCoYPTsIaZDRCQ+gNxAMAAABAhbHxPwPna5UA14jbPwMAAAAg3STwPwR9ycoKxvdMwg4rNkJD6A3EBH/JygrGr0/Czn00QkPoDcQEgc7KCsxxosEaZDRCY+gNxAMAAAAgGk/0PwM9xtR5CDgBQAMAAAAgjErwPwSGzsoKTKGkwQ4rNkJj6A3EBIjOygpMMZ/B'
..'zn00QmPoDcQEis3KCjSOh0E+yOhBaxEHxAMAAABAIiHzPwPOBKsovoUHQAMAAACATx7wPwSPzcoKNI6HQSJW7EHnIgfEBJHNygo0jodBovvoQWf3BsQElM/KCgAAAAAAADRDAAAAAAr0jYdBPsjoQU+9CsQKAAA0wwAAAAAAADTDAwAAAOD0QfM/AyaK3Yag3vs/AwAA'
..'AKAYBPA/BJrPygr0jYdBIlbsQdOrCsQEnM/KCvSNh0Gi++hBU9cKxASezcoKmONiwRpkNEJrEQfEAwAAACCe7PI/AyghuWFDuPA/AwAAAKDUCfA/BKPNygqY42LBDis2QuciB8QEpc3KCpjjYsHOfTRCZ/cGxASnz8oKGORiwRpkNEJPvQrEAwAAACDcnfM/A4ct2YH3'
..'yABAAwAAAEADeO8/BKzPygoY5GLBDis2QtOrCsQErs/KChjkYsHOfTRCU9cKxASwzsoKbVGQQj7I6EEP9wPEAwAAAOCwPvQ/A1ReeZ6g9uM/AwAAAGAdOO8/BLXOygqNxY9CIlbsQQ/3A8QEt87KCo0hkUKi++hBD/cDxAS5z8oK2u8aQj7I6EGffA/EAwAAAGCFSPM/'
..'AykKv3oSFQlAAwAAAEARNvA/BL7Pygra7xpCIlbsQSNrD8QEwM/KCtrvGkKi++hBo5YPxATCycoKomERQD7I6EHvXQPEA7JC1FoWawBAAwAAAOC3r+8/BMbJygqi3SJAJlbsQe9dA8QEyMnKCkS77j+m++hB710DxAoAAAAAAAAAAAAAgD8KAAAAAAAAgD8AAAAACgAA'
..'gD8AAAAAAAAAgAoAAACAKkd3PxCChL4KAACAPwAAAAAAAAAACgAAAAAAAAAAAACAvwoAAIC/AAAAAAAAAACmAQABAAIDBAECAAIFBwgJAhAAAgoLDA0ODwgQERIRExEUFRYXGBkaGxwdHhsfICEiIyQlAwkAAiYnDCgpKgwrLC0VLi8wMTIzJQMGAAI0KDUrNi03Ljgy'
..'OToFAwA7PD0+P0BBAwMAQkMWREVGCQMRAAJHCwwNSA9JEBESERMRFBUWShhLGhscTE1OHhsfTyFQI1FSCAMAD1MaVBxVQQkDAEJWFldFFVIIAgAPWBxZQQsDAEJWFldFFVIIBAACWg9bGlQcXF0NBQBCORZeXwxgYUViQQ0DAEJjFldFZAkCEAACZQsMDWYPZxAREhET'
..'ERQVFmgYGRobHGkeGx9qIWsjbAQBAgACBQdtCREQAAIKCwwNDg9tEBESERMRFBUWFxgZGm4cbx5uHyAhIiMkJRIJAAImJwwocCoMKywtFS4vMHEyMyUSBgACNChyKzYtNy44Mjk6FAMAOzw9Pj9AQRIDAEJDFkRFRgkSEQACRwsMDUgPcxAREhETERQVFkoYSxpuHHRN'
..'Th5uH08hUCNRUhcDAA9TGlQcVUEYAwBCVhZXRRVSFwIAD1gcWUEaAwBCVhZXRRVSFwQAAloPWxpUHFxdHAUAQjkWXl8MYGFFYkEcAwBCYxZXRWQJERAAAmULDA1mD3UQERIRExEUFRZoGBkabhx2Hm4faiFrI2wEAQIAAgUHdwkgEAACCgsMDQ4PdxAREhETERQVFhcY'
..'GRobHHgeGx8gISIjJCUhCQACJicMKHkqDCssLRUuLzB6MjMlIQYAAjQoeys2LTcuODI5OiMDADs8PT4/QEEhAwBCQxZERUYJIREAAkcLDA1ID3wQERIRExEUFRZKGEsaGxx9TU4eGx9PIVAjUVImAwAPUxpUHFVBJwMAQlYWV0UVUiYCAA9YHFlBKQMAQlYWV0UVUiYE'
..'AAJaD1saVBxcXSsFAEI5Fl5fDGBhRWJBKwMAQmMWV0VkCSAQAAJlCwwNZg9+EBESERMRFBUWaBgZGhscfx4bH2ohayNsBAECAAIFB4AJLxAAAgoLDA0OD4AQERIRExEUFRYXGBkabhyBHm4fICEiIyQlMAkAAiYnDCiCKgwrLC0VLi8wgzIzJTAGAAI0KIQrNi03Ljgy'
..'OToyAwA7PD0+P0BBMAMAQkMWREVGCTARAAJHCwwNSA+FEBESERMRFBUWShhLGm4chk1OHm4fTyFQI1FSNQMAD1MaVBxVQTYDAEJWFldFFVI1AgAPWBxZQTgDAEJWFldFFVI1BAACWg9bGlQcXF06BQBCORZeXwxgYUViQToDAEJjFldFZAkvEAACZQsMDWYPhxAREhET'
..'ERQVFmgYGRpuHIgebh9qIWsjbAQBAgACBQeJCT4OAAIKCwwNDg+JEBESERMRFBUWFxgZHIofICEiIyQlPwkAAiYnDCiLKgwrLC0VLi8wjDIzJT8GAAI0KI0rNi03LjgyOTpBAwA7PD0+P0BBPwMAQkMWREVGCT8PAAJHCwwNSA+OEBESERMRFBUWShhLHI9NTh9PIVAj'
..'UVJEAwAPUxpUHFVBRQMAQlYWV0UVUkQCAA9YHFlBRwMAQlYWV0UVUkQEAAJaD1saVBxcXUkFAEI5Fl5fDGBhRWJBSQMAQmMWV0VkCT4OAAJlCwwNZg+QEBESERMRFBUWaBgZHJEfaiFrI2wEAQIAAgUHkglNEAACCgsMDQ4PkhAREhETERQVFhcYGRqTHJQelR8gISIj'
..'JCVOCQACJicMKJYqDCssLRUuLzCXMjMlTgYAAjQomCs2LTcuODI5OlADADs8PT4/QEFOAwBCQxZERUYJThEAAkcLDA1ID5kQERIRExEUFRZKGEsakxyaTU4elR9PIVAjUVJTAwAPUxpUHFVBVAMAQlYWV0UVUlMCAA9YHFlBVgMAQlYWV0UVUlMEAAJaD1saVBxcXVgF'
..'AEI5Fl5fDGBhRWJBWAMAQmMWV0VkCU0QAAJlCwwNZg+bEBESERMRFBUWaBgZGpMcnB6VH2ohayNsBAECAAIFB50JXA4AAgoLDA0OD50QERIRExEUFRYXGBkcnh8gISIjJCVdCQACJicMKJ8qDCssLRUuLzCgMjMlXQYAAjQooSs2LTcuODI5Ol8DADs8PT4/QEFdAwBC'
..'QxZERUYJXQ8AAkcLDA1ID6IQERIRExEUFRZKGEsco01OH08hUCNRUmIDAA9TGlQcVUFjAwBCVhZXRRVSYgIAD1gcWUFlAwBCVhZXRRVSYgQAAloPWxpUHFxdZwUAQjkWXl8MYGFFYkFnAwBCYxZXRWQJXA4AAmULDA1mD6QQERIRExEUFRZoGBkcpR9qIWsjbAQBAgAC'
..'BQemCWsQAAIKCwwNDg+mEBESERMRFBUWFxgZGpMcpx6VHyAhIiMkJWwJAAImJwwoqCoMKywtFS4vMKkyMyVsBgACNCiqKzYtNy44Mjk6bgMAOzw9Pj9AQWwDAEJDFkRFRglsEQACRwsMDUgPqxAREhETERQVFkoYSxqTHKxNTh6VH08hUCNRUnEDAA9TGlQcVUFyAwBC'
..'VhZXRRVScQIAD1gcWUF0AwBCVhZXRRVScQQAAloPWxpUHFxddgUAQjkWXl8MYGFFYkF2AwBCYxZXRWQJaxAAAmULDA1mD60QERIRExEUFRZoGBkakxyuHpUfaiFrI2wEAQIAAgUHrwl6EAACCgsMDQ4PrxAREhETERQVFhcYGRpuHLAebh8gISIjJCV7CQACJicMKLEq'
..'DCssLRUuLzCyMjMlewYAAjQosys2LTcuODI5On0DADs8PT4/QEF7AwBCQxZERUYJexEAAkcLDA1ID7QQERIRExEUFRZKGEsabhy1TU4ebh9PIVAjUVKAAwAPUxpUHFVBgQMAQlYWV0UVUoACAA9YHFlBgwMAQlYWV0UVUoAEAAJaD1saVBxcXYUFAEI5Fl5fDGBhRWJB'
..'hQMAQmMWV0VkCXoQAAJlCwwNZg+2EBESERMRFBUWaBgZGm4ctx5uH2ohayNsBAECAAIFB7gJiRAAAgoLDA0OD7gQERIRExEUFRYXGBkakxy5HpUfICEiIyQligkAAiYnDCi6KgwrLC0VLi8wuzIzJYoGAAI0KLwrNi03LjgyOTqMAwA7PD0+P0BBigMAQkMWREVGCYoR'
..'AAJHCwwNSA+9EBESERMRFBUWShhLGpMcvk1OHpUfTyFQI1FSjwMAD1MaVBxVQZADAEJWFldFFVKPAgAPWBxZQZIDAEJWFldFFVKPBAACWg9bGlQcXF2UBQBCORZeXwxgYUViQZQDAEJjFldFZAmJEAACZQsMDWYPvxAREhETERQVFmgYGRqTHMAelR9qIWsjbAQBAgAC'
..'BQfBCZgQAAIKCwwNDg/BEBESERMRFBUWFxgZGhscwh4bHyAhIiMkJZkJAAImJwwogioMKywtFS4vMMMyMyWZBgACNCjEKzYtNy44Mjk6mwMAOzw9Pj9AQZkDAEJDFkRFRgmZEQACRwsMDUgPxRAREhETERQVFkoYSxobHMZNTh4bH08hUCNRUp4DAA9TGlQcVUGfAwBC'
..'VhZXRRVSngIAD1gcWUGhAwBCVhZXRRVSngQAAloPWxpUHFxdowUAQjkWXl8MYGFFYkGjAwBCYxZXRWQJmBAAAmULDA1mD8cQERIRExEUFRZoGBkaGxzIHhsfaiFrI2wLAgYDEQYSIAYhLwYwPgY/TQZOXAZdawZsegZ7iQaKmAaZ')
for _,obj in pairs(Objects) do
	obj.Parent = script or workspace
end
